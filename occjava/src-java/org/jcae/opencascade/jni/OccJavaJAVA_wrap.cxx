/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef HAVE_CONFIG_H
//config.h generated by autotools from config.h.in (see an example in Opencascade).
#include "config.h"
#endif
#include <Adaptor3d_Curve.hxx>
#include <TopExp.hxx>
#include <Poly_Triangulation.hxx>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif

#include <Standard_ErrorHandler.hxx>
 #include "jnistream.hxx" 

	jdoubleArray XYZtoDoubleArray(JNIEnv* jenv, const gp_XYZ & xyz)
	{
	    jdouble nativeArray[]={xyz.X(), xyz.Y(), xyz.Z()};
		jdoubleArray toReturn=jenv->NewDoubleArray(3);
		jenv->SetDoubleArrayRegion(toReturn, 0, 3, nativeArray);
		return toReturn;
	}

#include <gp_Trsf.hxx>
SWIGINTERN void gp_Trsf_getValues(gp_Trsf *self,double matrix[16]){
		int k=0;
		for(int i=1; i<=3; i++)
			for(int j=1; j<=4; j++)
				matrix[k++]=self->Value(i,j);
		matrix[12]=0;
		matrix[13]=0;
		matrix[14]=0;
		matrix[15]=1;
	}
#include <gp_Circ.hxx>
#include <gp_Parab.hxx>
#include <TColStd_HArray1OfBoolean.hxx>
#include <TColgp_HArray1OfPnt.hxx>
#include <TColgp_Array1OfVec.hxx>
#include <TColgp_Array1OfPnt.hxx>
#include <TColgp_Array1OfPnt2d.hxx>
#include <TColStd_Array1OfReal.hxx>

#include <TopoDS_CompSolid.hxx>
#include <TopoDS_Solid.hxx>
#include <TopoDS_Shell.hxx>
#include <TopoDS_Compound.hxx>
#include <TopoDS_Wire.hxx>
#include <TopoDS_Iterator.hxx>
#include <TopoDS_Builder.hxx>

SWIGINTERN jlong TopoDS_Shape_getTShape(TopoDS_Shape *self){
		return (jlong)&*self->TShape();
	}
#include <TopTools_ListIteratorOfListOfShape.hxx>

#include <BRep_Tool.hxx>
#include <Geom_Curve.hxx>
#include <BRep_Builder.hxx>
#include <TopoDS_Builder.hxx>

SWIGINTERN Poly_Triangulation *BRep_Tool_triangulation(TopoDS_Face const &F,TopLoc_Location &L){
		Handle_Poly_Triangulation hgc=BRep_Tool::Triangulation(F,L);
		if(hgc.IsNull())
			return NULL;
		else
			return (Poly_Triangulation*)(Standard_Transient*)hgc;
	}
SWIGINTERN void BRep_Tool_range(TopoDS_Edge const &E,double range[2]){
		BRep_Tool::Range(E, range[0], range[1]);
	}
SWIGINTERN Handle_Geom_Curve *BRep_Tool_curve(TopoDS_Edge const &E,Standard_Real &First,Standard_Real &Last){
		Handle_Geom_Curve * hgc=new Handle_Geom_Curve(BRep_Tool::Curve(E, First, Last));
		if(hgc->IsNull())
			return NULL;
		else
			return hgc;
	}
SWIGINTERN Handle_Geom_Surface *BRep_Tool_surface(TopoDS_Face const &F){
		Handle_Geom_Surface * hgc=new Handle_Geom_Surface(BRep_Tool::Surface(F));
		if(hgc->IsNull())
			return NULL;
		else
			return hgc;
	}
SWIGINTERN Handle_Geom2d_Curve *BRep_Tool_curveOnSurface(TopoDS_Edge const &E,TopoDS_Face const &F,Standard_Real &First,Standard_Real &Last){
		Handle_Geom2d_Curve * hgc=new Handle_Geom2d_Curve(BRep_Tool::CurveOnSurface(E, F, First, Last));
		if(hgc->IsNull())
			return NULL;
		else
			return hgc;
	}

#include <BRepFill_Pipe.hxx>

#include "GeomLProp_SLProps.hxx"
SWIGINTERN void GeomLProp_SLProps_normal(GeomLProp_SLProps *self,double normal[3]){
		if(!self->IsNormalDefined())
		{
			normal[0]=0;
			normal[1]=0;
			normal[2]=0;
		}
		else
		{
			const gp_Dir & d=self->Normal();
			normal[0]=d.X();
			normal[1]=d.Y();
			normal[2]=d.Z();
		}
	}
SWIGINTERN void GeomLProp_SLProps_normalArray(GeomLProp_SLProps *self,double *uvNodes,double *normalArray,int numNodes){
		for(int i=0;i<numNodes;i++)
		{
			self->SetParameters(uvNodes[2*i],uvNodes[2*i+1]);
			
			if(!self->IsNormalDefined())
			{
				normalArray[3*i]=0;
				normalArray[3*i+1]=0;
				normalArray[3*i+2]=0;
			}
			else
			{
				const gp_Dir & d=self->Normal();
				
				normalArray[3*i]=d.X();
				normalArray[3*i+1]=d.Y();
				normalArray[3*i+2]=d.Z();
			}
		}
	}
SWIGINTERN Standard_Real GeomLProp_SLProps_minCurvature(GeomLProp_SLProps *self){
		if (!self->IsCurvatureDefined())
			return sqrt(-1.0);
		else
			return self->MinCurvature ();
	}
SWIGINTERN Standard_Real GeomLProp_SLProps_maxCurvature(GeomLProp_SLProps *self){
		if (!self->IsCurvatureDefined())
			return sqrt(-1.0);
		else
			return self->MaxCurvature ();
	}
SWIGINTERN void GeomLProp_SLProps_curvatureDirection(GeomLProp_SLProps *self,double jmax[3],double jmin[3]){
		gp_Dir max, min;
		self->CurvatureDirections(max, min);
		jmax[0]=max.X();
		jmax[1]=max.Y();
		jmax[2]=max.Z();
		jmin[0]=min.X();
		jmin[1]=min.Y();
		jmin[2]=min.Z();
	}

#include <BRepTools.hxx>
#include <BRepTools_ShapeSet.hxx>    

SWIGINTERN Standard_Boolean BRepTools_read__SWIG_1(TopoDS_Shape &shape,Standard_IStream &input,BRep_Builder const &builder){
		BRepTools_ShapeSet SS(builder);
		SS.Read(input);
		if(!SS.NbShapes()) return Standard_False;
		SS.Read(shape,input);
		return Standard_True;
	}
#include <BRepTools_WireExplorer.hxx>
#include <BRepTools_Quilt.hxx>

#include <BRepBuilderAPI_Transform.hxx>
#include <BRepBuilderAPI_ModifyShape.hxx>
#include <BRepBuilderAPI_MakeShape.hxx>
#include <BRepBuilderAPI_MakeWire.hxx>
#include <BRepBuilderAPI_MakeVertex.hxx>
#include <BRepBuilderAPI_MakeEdge.hxx>
#include <BRepBuilderAPI_MakeFace.hxx>
#include <BRepBuilderAPI_MakeSolid.hxx>
#include <BRepBuilderAPI_NurbsConvert.hxx>
#include <BRepBuilderAPI_Sewing.hxx>


#include <BRepPrimAPI_MakeBox.hxx>
#include <BRepPrimAPI_MakeCone.hxx>
#include <BRepPrimAPI_MakeBox.hxx>
#include <BRepPrimAPI_MakeTorus.hxx>
#include <BRepPrimAPI_MakeCylinder.hxx>
#include <BRepPrimAPI_MakeSphere.hxx>
#include <BRepPrimAPI_MakeSweep.hxx>
#include <BRepPrimAPI_MakePrism.hxx>
#include <BRepPrimAPI_MakeRevol.hxx>

#include <BRepAlgoAPI_BooleanOperation.hxx>
#include <BRepAlgoAPI_Fuse.hxx>
#include <BRepAlgoAPI_Common.hxx>
#include <BRepAlgoAPI_Cut.hxx>
#include <BRepAlgoAPI_Section.hxx>

#include <Standard_ErrorHandler.hxx>
#include <BRepOffsetAPI_NormalProjection.hxx>
#include <BRepOffsetAPI_MakePipe.hxx>
#include <BRepOffsetAPI_MakePipeShell.hxx>
#include <BRepOffsetAPI_ThruSections.hxx>

#include <Poly_Triangulation.hxx>

#include <Geom_Curve.hxx>
#include <Geom_Surface.hxx>
#include <Geom2d_Curve.hxx>
#include <Geom_Geometry.hxx>
#include <Geom2d_Geometry.hxx>
#include <Geom_BoundedCurve.hxx>
#include <Geom_BSplineCurve.hxx>
#include <Geom_TrimmedCurve.hxx>

SWIGINTERN Standard_Real Handle_Geom_Curve_firstParameter(Handle_Geom_Curve *self){
		return (*self)->FirstParameter();
	}
SWIGINTERN Standard_Real Handle_Geom_Curve_lastParameter(Handle_Geom_Curve *self){
		return (*self)->LastParameter();
	}
SWIGINTERN Standard_Boolean Handle_Geom_Curve_isClosed(Handle_Geom_Curve *self){
		return (*self)->IsClosed();
	}
SWIGINTERN Standard_Boolean Handle_Geom_Curve_isPeriodic(Handle_Geom_Curve *self){
		return (*self)->IsPeriodic();
	}
SWIGINTERN Standard_Real Handle_Geom_Curve_period(Handle_Geom_Curve *self){
		return (*self)->Period();
	}
SWIGINTERN gp_Pnt Handle_Geom_Surface_value(Handle_Geom_Surface const *self,Standard_Real const U,Standard_Real const V){
		return (*self)->Value(U, V);
	}
SWIGINTERN void Handle_Geom_Surface_bounds__SWIG_0(Handle_Geom_Surface const *self,double bounds[4]){
		(*self)->Bounds(bounds[0], bounds[1], bounds[2], bounds[3]);
	}
SWIGINTERN void Handle_Geom_Surface_bounds__SWIG_1(Handle_Geom_Surface const *self,Standard_Real &U1,Standard_Real &U2,Standard_Real &V1,Standard_Real &V2){
		(*self)->Bounds(U1,U2,V1,V2);
	}
SWIGINTERN Standard_Boolean Handle_Geom_Surface_isUClosed(Handle_Geom_Surface const *self){
		return (*self)->IsUClosed();
	}
SWIGINTERN Standard_Boolean Handle_Geom_Surface_isVClosed(Handle_Geom_Surface const *self){
		return (*self)->IsVClosed();
	}
SWIGINTERN Handle_Geom_Curve Handle_Geom_Surface_uIso(Handle_Geom_Surface const *self,Standard_Real const U){
		return (*self)->UIso(U);
	}
SWIGINTERN Handle_Geom_Curve Handle_Geom_Surface_vIso(Handle_Geom_Surface const *self,Standard_Real const V){
		return (*self)->VIso(V);
	}
SWIGINTERN Handle_Geom_BSplineCurve *new_Handle_Geom_BSplineCurve__SWIG_0(TColgp_Array1OfPnt const &Poles,TColStd_Array1OfReal const &Weights,TColStd_Array1OfReal const &Knots,TColStd_Array1OfInteger const &Multiplicities,Standard_Integer const Degree,Standard_Boolean const Periodic=Standard_False,Standard_Boolean const CheckRational=Standard_True){
		return new Handle_Geom_BSplineCurve(new Geom_BSplineCurve(
			Poles, Weights, Knots, Multiplicities, Degree, Periodic, CheckRational));
	}
SWIGINTERN void Handle_Geom_BSplineCurve_setKnot__SWIG_0(Handle_Geom_BSplineCurve *self,Standard_Integer const Index,Standard_Real const K){
    (*self)->SetKnot(Index,K);
  }
SWIGINTERN void Handle_Geom_BSplineCurve_setKnot__SWIG_1(Handle_Geom_BSplineCurve *self,Standard_Integer const Index,Standard_Real const K,Standard_Integer const M){
    (*self)->SetKnot(Index,K,M);
  }
SWIGINTERN void Handle_Geom_BSplineCurve_setPeriodic(Handle_Geom_BSplineCurve *self){
    (*self)->SetPeriodic();
  }
SWIGINTERN void Handle_Geom_BSplineCurve_setNotPeriodic(Handle_Geom_BSplineCurve *self){
    (*self)->SetNotPeriodic();
  }
SWIGINTERN void Handle_Geom_BSplineCurve_setOrigin__SWIG_0(Handle_Geom_BSplineCurve *self,Standard_Integer const Index){
     (*self)->SetOrigin(Index);
  }
SWIGINTERN void Handle_Geom_BSplineCurve_setOrigin__SWIG_1(Handle_Geom_BSplineCurve *self,Standard_Real const U,Standard_Real const Tol){
     (*self)->SetOrigin(U,Tol);
  }
SWIGINTERN void Handle_Geom_BSplineCurve_setPole__SWIG_0(Handle_Geom_BSplineCurve *self,Standard_Integer const Index,gp_Pnt const &P){
    (*self)->SetPole(Index,P);
  }
SWIGINTERN void Handle_Geom_BSplineCurve_setPole__SWIG_1(Handle_Geom_BSplineCurve *self,Standard_Integer const Index,gp_Pnt const &P,Standard_Real const Weight){
    (*self)->SetPole(Index,P,Weight);
  }
SWIGINTERN void Handle_Geom_BSplineCurve_movePoint(Handle_Geom_BSplineCurve *self,Standard_Real const U,gp_Pnt const &P,Standard_Integer const Index1,Standard_Integer const Index2,Standard_Integer &FirstModifiedPole,Standard_Integer &LastModifiedPole){
    (*self)->MovePoint(U,P,Index1,Index2,FirstModifiedPole,LastModifiedPole);
  }
SWIGINTERN void Handle_Geom_BSplineCurve_movePointAndTangent(Handle_Geom_BSplineCurve *self,Standard_Real const U,gp_Pnt const &P,gp_Vec const &Tangent,Standard_Real const Tolerance,Standard_Integer const StartingCondition,Standard_Integer const EndingCondition){
    Standard_Integer ErrorStatus =0;
	(*self)->MovePointAndTangent(U,P,Tangent,Tolerance,StartingCondition,EndingCondition,ErrorStatus);
  }
SWIGINTERN Standard_Boolean Handle_Geom_BSplineCurve_isClosed(Handle_Geom_BSplineCurve const *self){
    return (*self)->IsClosed();
  }
SWIGINTERN Standard_Boolean Handle_Geom_BSplineCurve_isPeriodic(Handle_Geom_BSplineCurve const *self){
    return (*self)->IsPeriodic();
  }
SWIGINTERN Standard_Boolean Handle_Geom_BSplineCurve_isRational(Handle_Geom_BSplineCurve const *self){
    return (*self)->IsRational();
  }
SWIGINTERN GeomAbs_Shape Handle_Geom_BSplineCurve_continuity(Handle_Geom_BSplineCurve const *self){
    return (*self)->Continuity();
  }
SWIGINTERN Standard_Integer Handle_Geom_BSplineCurve_Degree(Handle_Geom_BSplineCurve const *self){
    return (*self)->Degree();
  }
SWIGINTERN gp_Pnt Handle_Geom_BSplineCurve_localValue(Handle_Geom_BSplineCurve const *self,Standard_Real const U,Standard_Integer const FromK1,Standard_Integer const ToK2){
    return (*self)->LocalValue(U,FromK1,ToK2);
  }
SWIGINTERN gp_Pnt Handle_Geom_BSplineCurve_endPoint(Handle_Geom_BSplineCurve const *self){
    return (*self)->EndPoint();
  }
SWIGINTERN gp_Pnt Handle_Geom_BSplineCurve_startPoint(Handle_Geom_BSplineCurve const *self){
    return (*self)->StartPoint();
  }
SWIGINTERN Standard_Integer Handle_Geom_BSplineCurve_nbKnots(Handle_Geom_BSplineCurve const *self){
    return (*self)->NbKnots();
  }
SWIGINTERN Standard_Integer Handle_Geom_BSplineCurve_nbPoles(Handle_Geom_BSplineCurve const *self){
    return (*self)->NbPoles();
  }
SWIGINTERN gp_Pnt Handle_Geom_BSplineCurve_pole(Handle_Geom_BSplineCurve const *self,Standard_Integer const Index){
    return (*self)->Pole(Index);
  }
SWIGINTERN Standard_Real Handle_Geom_BSplineCurve_weight(Handle_Geom_BSplineCurve const *self,Standard_Integer const Index){
    return (*self)->Weight(Index);
  }

#include <GeomFill_Pipe.hxx>


#include <BRepLib.hxx>

#include <BRepFilletAPI_MakeFillet.hxx>
#include <BRepFilletAPI_MakeChamfer.hxx>
#include <BRepCheck_Analyzer.hxx>
#include <ShapeBuild_ReShape.hxx>

#include <STEPControl_Reader.hxx>
#include <IGESControl_Reader.hxx>
#include <XSControl_WorkSession.hxx>
#include <XSControl_TransferReader.hxx>
#include <StepRepr_RepresentationItem.hxx>
#include <TCollection_HAsciiString.hxx>
#include <IGESData_IGESEntity.hxx>
#include <TransferBRep.hxx>
#include <Transfer_Binder.hxx>
#include <Transfer_TransientProcess.hxx>
#include <Interface_InterfaceModel.hxx>
#include <iostream>
 
SWIGINTERN IFSelect_ReturnStatus XSControl_Reader_readFile__SWIG_1(XSControl_Reader *self,jbyte filename[]){
		return self->ReadFile((char*)filename);
	}
SWIGINTERN char const *STEPControl_Reader_getLabel(STEPControl_Reader *self,TopoDS_Shape *theShape){
		const Handle(XSControl_WorkSession)& theSession = self->WS();
		const Handle(XSControl_TransferReader)& aReader = theSession->TransferReader();
		Handle(Standard_Transient) anEntity = aReader->EntityFromShapeResult(*theShape, 1);
		if (anEntity.IsNull()) {
			// as just mapped
			anEntity = aReader->EntityFromShapeResult (*theShape,-1);
		}

		if (anEntity.IsNull()) {
			// as anything
			anEntity = aReader->EntityFromShapeResult (*theShape,4);
		}

		if (anEntity.IsNull()) {
			cout<<"Warning: XSInterface_STEPReader::ReadAttributes() entity not found"<<endl;
			return NULL;
		}
		else 
		{
			Handle(StepRepr_RepresentationItem) aReprItem;
			aReprItem = Handle(StepRepr_RepresentationItem)::DownCast(anEntity);

			if (aReprItem.IsNull()) {
				cout<<"Error: STEPReader::ReadAttributes(): StepRepr_RepresentationItem Is NULL"<<endl;
				return NULL;
			}
			else 
				return aReprItem->Name()->ToCString();
		}
	}
SWIGINTERN char const *IGESControl_Reader_getLabel(IGESControl_Reader *self,TopoDS_Shape theShape){
		const Handle(XSControl_WorkSession)& theSession = self->WS();
		const Handle(Interface_InterfaceModel)& theModel = theSession->Model();
		const Handle(XSControl_TransferReader)& aReader = theSession->TransferReader();
		const Handle(Transfer_TransientProcess)& tp = aReader->TransientProcess();
		Standard_Integer nb = theModel->NbEntities(); 
		for(Standard_Integer i=1; i<=nb; i++) 
		{
			Handle(IGESData_IGESEntity) ent = Handle(IGESData_IGESEntity)::DownCast(theModel->Value(i));

			if (ent.IsNull())
				continue;

			Handle(Transfer_Binder) binder = tp->Find(ent); 

			if (binder.IsNull())
				continue;
			TopoDS_Shape oneShape = TransferBRep::ShapeResult(binder);
			if (oneShape.IsNull())
				continue;
			if (oneShape.IsEqual(theShape))
			{
				if (ent->HasName())
					return ent->NameValue()->String().ToCString();
				else
					return NULL; 
			}
		}
		return NULL; 
	}
SWIGINTERN TopoDS_Shape IGESControl_Reader_getShape(IGESControl_Reader *self,char *shapeName){
		const TCollection_AsciiString ascShapeName(shapeName);
		const Handle(XSControl_WorkSession)& theSession = self->WS();
		const Handle(Interface_InterfaceModel)& theModel = theSession->Model();
		const Handle(XSControl_TransferReader)& aReader = theSession->TransferReader();
		const Handle(Transfer_TransientProcess)& tp = aReader->TransientProcess();
		Standard_Integer nb = theModel->NbEntities();
		TopoDS_Shape retShape; 
		for(Standard_Integer i=1; i<=nb; i++)
		{
			Handle(IGESData_IGESEntity) ent = Handle(IGESData_IGESEntity)::DownCast(theModel->Value(i));

			if (ent.IsNull())
				continue;
			Handle(Transfer_Binder) binder = tp->Find(ent);

			if (binder.IsNull())
				continue;
			TopoDS_Shape oneShape = TransferBRep::ShapeResult(binder);

			if (oneShape.IsNull())
				continue;

			if (ent->HasName() && ent->NameValue()->String().IsEqual(ascShapeName))
				retShape = oneShape;
		}
		return retShape; 
	}
SWIGINTERN void IGESControl_Reader_dumpLabels(IGESControl_Reader *self){
		const Handle(XSControl_WorkSession)& theSession = self->WS();
		const Handle(Interface_InterfaceModel)& theModel = theSession->Model();
		Standard_Integer nb = theModel->NbEntities();
		for(Standard_Integer i=1; i<=nb; i++)
		{
			Handle(IGESData_IGESEntity) ent = Handle(IGESData_IGESEntity)::DownCast(theModel->Value(i));
			if (ent.IsNull()) continue;
			if (ent->HasName())
			{
				std::cout << ent->NameValue()->String().ToCString() << std::endl;
			}
		}
	}

#include <STEPControl_Writer.hxx>
 

#include <IGESControl_Writer.hxx>
 

#include <IGESControl_Controller.hxx>
 
 #include <ShapeFix_Wireframe.hxx> 
 #include <ShapeFix_Root.hxx> 
 #include <ShapeBuild_ReShape.hxx> 
SWIGINTERN ShapeBuild_ReShape *ShapeFix_Root_getContext(ShapeFix_Root *self){
        Standard_Transient * p = self->Context();
        return dynamic_cast<ShapeBuild_ReShape *>(p);
    }
SWIGINTERN void ShapeFix_Wireframe_setDropSmallEdges(ShapeFix_Wireframe *self,bool b){
		self->ModeDropSmallEdges()=b;
	}
SWIGINTERN bool ShapeFix_Wireframe_getDropSmallEdges(ShapeFix_Wireframe *self){
        return self->ModeDropSmallEdges()!=0;
	}

#include <APIHeaderSection_MakeHeader.hxx>

 #include <ShapeUpgrade_RemoveInternalWires.hxx> 
 #include <ShapeUpgrade_Tool.hxx> 
 #include <ShapeUpgrade_ShapeDivideArea.hxx> 
SWIGINTERN void ShapeUpgrade_RemoveInternalWires_setMinArea(ShapeUpgrade_RemoveInternalWires *self,double d){
		self->MinArea()=d;
	}
SWIGINTERN double ShapeUpgrade_RemoveInternalWires_getMinArea(ShapeUpgrade_RemoveInternalWires *self){
		return self->MinArea();
	}
SWIGINTERN void ShapeUpgrade_RemoveInternalWires_setRemoveFaceMode(ShapeUpgrade_RemoveInternalWires *self,Standard_Boolean b){
		self->RemoveFaceMode()=b;
	}
SWIGINTERN Standard_Boolean ShapeUpgrade_RemoveInternalWires_getRemoveFaceMode(ShapeUpgrade_RemoveInternalWires *self){
		return self->RemoveFaceMode();
	}
SWIGINTERN void ShapeUpgrade_ShapeDivideArea_setMaxArea(ShapeUpgrade_ShapeDivideArea *self,double d){
		self->MaxArea()=d;
	}
SWIGINTERN double ShapeUpgrade_ShapeDivideArea_getMaxArea(ShapeUpgrade_ShapeDivideArea *self){
		return self->MaxArea();
	}
#include <GeomAPI_PointsToBSpline.hxx>
#include <GeomAPI_Interpolate.hxx>
#include <GC_MakeArcOfCircle.hxx>
#include <BRepAlgo.hxx>
#include <BRepAlgo_BooleanOperation.hxx>
#include <BRepAlgo_Cut.hxx>
#include "TopExp_Explorer.hxx"
#include "Bnd_Box.hxx"
SWIGINTERN void Bnd_Box_get(Bnd_Box *self,double box[6]){
		if(!self->IsVoid())
			self->Get(box[0], box[1], box[2], box[3], box[4], box[5]);
	}
#include "BRepBndLib.hxx"
#include "Adaptor2d_Curve2d.hxx"
#include "Geom2dAdaptor_Curve.hxx"
#include "Adaptor3d_Curve.hxx"
SWIGINTERN void Adaptor3d_Curve_arrayValues(Adaptor3d_Curve *self,int size,double u[]){
		for (int i = 0; i < size; i++)
		{
			gp_Pnt gp=self->Value(u[3*i]);
			u[3*i]   = gp.X();
			u[3*i+1] = gp.Y();
			u[3*i+2] = gp.Z();
		}	
	}
#include "GeomAdaptor_Curve.hxx"
#include "BRepAdaptor_Curve.hxx"
#include "GProp_GProps.hxx"
#include "BRepGProp.hxx"
#include <ShapeAnalysis_FreeBounds.hxx>
#include <GCPnts_UniformDeflection.hxx>
#include <GCPnts_AbscissaPoint.hxx>
#include <BRepMesh_DiscretRoot.hxx>
#include <BRepMesh_IncrementalMesh.hxx>
#include <GeomAPI_ProjectPointOnSurf.hxx>

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GP_1Trsf(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  gp_Trsf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (gp_Trsf *)new gp_Trsf();
  *(gp_Trsf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GP_1Trsf_1setRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdouble jarg3) {
  gp_Trsf *arg1 = (gp_Trsf *) 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Trsf **)&jarg1; 
  {
    if(jenv->GetArrayLength(jarg2)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Ax1(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg3 = (Standard_Real)jarg3; 
  (arg1)->SetRotation((gp_Ax1 const &)*arg2,arg3);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GP_1Trsf_1setTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  gp_Trsf *arg1 = (gp_Trsf *) 0 ;
  gp_Vec *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Trsf **)&jarg1; 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Vec(naxe[0],naxe[1],naxe[2]);
  }
  (arg1)->SetTranslation((gp_Vec const &)*arg2);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GP_1Trsf_1setValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11, jdouble jarg12, jdouble jarg13) {
  gp_Trsf *arg1 = (gp_Trsf *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Standard_Real arg6 ;
  Standard_Real arg7 ;
  Standard_Real arg8 ;
  Standard_Real arg9 ;
  Standard_Real arg10 ;
  Standard_Real arg11 ;
  Standard_Real arg12 ;
  Standard_Real arg13 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Trsf **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  arg5 = (Standard_Real)jarg5; 
  arg6 = (Standard_Real)jarg6; 
  arg7 = (Standard_Real)jarg7; 
  arg8 = (Standard_Real)jarg8; 
  arg9 = (Standard_Real)jarg9; 
  arg10 = (Standard_Real)jarg10; 
  arg11 = (Standard_Real)jarg11; 
  arg12 = (Standard_Real)jarg12; 
  arg13 = (Standard_Real)jarg13; 
  (arg1)->SetValues(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GP_1Trsf_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  gp_Trsf *arg1 = (gp_Trsf *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Trsf **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  gp_Trsf_getValues(arg1,arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GP_1Trsf(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gp_Trsf *arg1 = (gp_Trsf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gp_Trsf **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GP_1Circ(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  gp_Circ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Ax2(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg2 = (Standard_Real)jarg2; 
  result = (gp_Circ *)new gp_Circ((gp_Ax2 const &)*arg1,arg2);
  *(gp_Circ **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GP_1Circ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gp_Circ *arg1 = (gp_Circ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gp_Circ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GP_1Parab_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  gp_Parab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Ax2(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg2 = (Standard_Real)jarg2; 
  result = (gp_Parab *)new gp_Parab((gp_Ax2 const &)*arg1,arg2);
  *(gp_Parab **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GP_1Parab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  gp_Ax1 *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Parab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Ax1(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  result = (gp_Parab *)new gp_Parab((gp_Ax1 const &)*arg1,(gp_Pnt const &)*arg2);
  *(gp_Parab **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GP_1Parab(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gp_Parab *arg1 = (gp_Parab *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gp_Parab **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Handle_1TColStd_1HArray1OfBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_TColStd_HArray1OfBoolean *arg1 = (Handle_TColStd_HArray1OfBoolean *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_TColStd_HArray1OfBoolean **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Handle_1TColgp_1HArray1OfPnt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_TColgp_HArray1OfPnt *arg1 = (Handle_TColgp_HArray1OfPnt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_TColgp_HArray1OfPnt **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shape_1shapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_ShapeEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  result = (TopAbs_ShapeEnum)(arg1)->ShapeType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shape_1nativeIsSame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = ((TopoDS_Shape const *)arg1)->IsSame((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shape_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopAbs_Orientation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  result = (TopAbs_Orientation)((TopoDS_Shape const *)arg1)->Orientation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shape_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  (arg1)->Reverse();
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shape_1reversed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  result = ((TopoDS_Shape const *)arg1)->Reversed();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shape_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Integer arg2 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  result = (Standard_Integer)((TopoDS_Shape const *)arg1)->HashCode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shape_1free_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  result = ((TopoDS_Shape const *)arg1)->Free();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shape_1free_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  {
    arg2 = jarg2;
  }
  (arg1)->Free(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shape_1getTShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  jlong result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  result = TopoDS_Shape_getTShape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Shape(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_Shape *)new TopoDS_Shape();
  *(TopoDS_Shape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Shape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Shape *arg1 = (TopoDS_Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Shape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Compound(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Compound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_Compound *)new TopoDS_Compound();
  *(TopoDS_Compound **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Compound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Compound *arg1 = (TopoDS_Compound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Compound **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1CompSolid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_CompSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_CompSolid *)new TopoDS_CompSolid();
  *(TopoDS_CompSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1CompSolid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_CompSolid *arg1 = (TopoDS_CompSolid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_CompSolid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Solid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Solid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_Solid *)new TopoDS_Solid();
  *(TopoDS_Solid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Solid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Solid *arg1 = (TopoDS_Solid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Solid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Shell(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Shell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_Shell *)new TopoDS_Shell();
  *(TopoDS_Shell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Shell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Shell *arg1 = (TopoDS_Shell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Shell **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Face(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Face *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_Face *)new TopoDS_Face();
  *(TopoDS_Face **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Face(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Face *arg1 = (TopoDS_Face *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Face **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Wire(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Wire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_Wire *)new TopoDS_Wire();
  *(TopoDS_Wire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Wire(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Wire *arg1 = (TopoDS_Wire *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Wire **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Edge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Edge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_Edge *)new TopoDS_Edge();
  *(TopoDS_Edge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Edge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Edge *arg1 = (TopoDS_Edge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Edge **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Vertex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_Vertex *)new TopoDS_Vertex();
  *(TopoDS_Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Vertex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Vertex *arg1 = (TopoDS_Vertex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Vertex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Iterator_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopoDS_Iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopoDS_Iterator *)new TopoDS_Iterator();
  *(TopoDS_Iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Iterator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  Standard_Boolean arg3 ;
  TopoDS_Iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    arg2 = jarg2;
  }
  {
    arg3 = jarg3;
  }
  result = (TopoDS_Iterator *)new TopoDS_Iterator((TopoDS_Shape const &)*arg1,arg2,arg3);
  *(TopoDS_Iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Iterator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  TopoDS_Iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    arg2 = jarg2;
  }
  result = (TopoDS_Iterator *)new TopoDS_Iterator((TopoDS_Shape const &)*arg1,arg2);
  *(TopoDS_Iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopoDS_1Iterator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (TopoDS_Iterator *)new TopoDS_Iterator((TopoDS_Shape const &)*arg1);
  *(TopoDS_Iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Iterator_1initialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  {
    arg4 = jarg4;
  }
  (arg1)->Initialize((TopoDS_Shape const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Iterator_1initialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  (arg1)->Initialize((TopoDS_Shape const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Iterator_1initialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Initialize((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Iterator_1more(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  result = ((TopoDS_Iterator const *)arg1)->More();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Iterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  (arg1)->Next();
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Iterator_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  result = (TopoDS_Shape *) &((TopoDS_Iterator const *)arg1)->Value();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Iterator *arg1 = (TopoDS_Iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Builder_1makeWire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire & reference is null");
    return ;
  } 
  ((TopoDS_Builder const *)arg1)->MakeWire(*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Builder_1makeCompound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Compound *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Compound **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Compound & reference is null");
    return ;
  } 
  ((TopoDS_Builder const *)arg1)->MakeCompound(*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Builder_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  ((TopoDS_Builder const *)arg1)->Add(*arg2,(TopoDS_Shape const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Builder_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  ((TopoDS_Builder const *)arg1)->Remove(*arg2,(TopoDS_Shape const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopoDS_1Builder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopoDS_Builder *arg1 = (TopoDS_Builder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopoDS_Builder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1pnt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  TopoDS_Vertex *arg1 = 0 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Vertex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  result = BRep_Tool::Pnt((TopoDS_Vertex const &)*arg1);
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1parameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdoubleArray jresult = 0 ;
  TopoDS_Vertex *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  gp_Pnt2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Vertex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Face **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  try {
    result = BRep_Tool::Parameters((TopoDS_Vertex const &)*arg1,(TopoDS_Face const &)*arg2);
  }
  catch(Standard_NoSuchObject &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Standard_NoSuchObject exception thrown");
    return 0; 
  }
  
  {
    jdouble nativeArray[]={
      (&result)->X(), (&result)->Y()
    };
    jdoubleArray toReturn=jenv->NewDoubleArray(2);
    jenv->SetDoubleArrayRegion(toReturn, 0, 2, nativeArray);
    jresult=toReturn;
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1parameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  TopoDS_Vertex *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Vertex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (Standard_Real)BRep_Tool::Parameter((TopoDS_Vertex const &)*arg1,(TopoDS_Edge const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1degenerated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = BRep_Tool::Degenerated((TopoDS_Edge const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1hasContinuity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  TopoDS_Face *arg3 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Face **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Face **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  result = BRep_Tool::HasContinuity((TopoDS_Edge const &)*arg1,(TopoDS_Face const &)*arg2,(TopoDS_Face const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1continuity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  TopoDS_Face *arg3 = 0 ;
  GeomAbs_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Face **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Face **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  result = (GeomAbs_Shape)BRep_Tool::Continuity((TopoDS_Edge const &)*arg1,(TopoDS_Face const &)*arg2,(TopoDS_Face const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1tolerance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TopoDS_Face *arg1 = 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Face **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  result = (Standard_Real)BRep_Tool::Tolerance((TopoDS_Face const &)*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1tolerance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (Standard_Real)BRep_Tool::Tolerance((TopoDS_Edge const &)*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1tolerance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  TopoDS_Vertex *arg1 = 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Vertex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  result = (Standard_Real)BRep_Tool::Tolerance((TopoDS_Vertex const &)*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1triangulation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Face *arg1 = 0 ;
  TopLoc_Location *arg2 = 0 ;
  Poly_Triangulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Face **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  arg2 = *(TopLoc_Location **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopLoc_Location & reference is null");
    return 0;
  } 
  result = (Poly_Triangulation *)BRep_Tool_triangulation((TopoDS_Face const &)*arg1,*arg2);
  *(Poly_Triangulation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  TopoDS_Edge *arg1 = 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  BRep_Tool_range((TopoDS_Edge const &)*arg1,arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1curve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  jlong jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  Handle_Geom_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return 0; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return 0; 
  result = (Handle_Geom_Curve *)BRep_Tool_curve((TopoDS_Edge const &)*arg1,*arg2,*arg3);
  *(Handle_Geom_Curve **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1surface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Face *arg1 = 0 ;
  Handle_Geom_Surface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Face **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  result = (Handle_Geom_Surface *)BRep_Tool_surface((TopoDS_Face const &)*arg1);
  *(Handle_Geom_Surface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Tool_1curveOnSurface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  jlong jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  Handle_Geom2d_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Face **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return 0; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, (double **)&arg4, jarg4)) return 0; 
  result = (Handle_Geom2d_Curve *)BRep_Tool_curveOnSurface((TopoDS_Edge const &)*arg1,(TopoDS_Face const &)*arg2,*arg3,*arg4);
  *(Handle_Geom2d_Curve **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, (double *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRep_1Tool(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRep_Tool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRep_Tool *)new BRep_Tool();
  *(BRep_Tool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRep_1Tool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRep_Tool *arg1 = (BRep_Tool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRep_Tool **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRep_1Builder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRep_Builder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRep_Builder *)new BRep_Builder();
  *(BRep_Builder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Builder_1updateVertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jdouble jarg6) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  TopoDS_Face *arg5 = 0 ;
  Standard_Real arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(BRep_Builder **)&jarg1; 
  arg2 = *(TopoDS_Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return ;
  } 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  arg5 = *(TopoDS_Face **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return ;
  } 
  arg6 = (Standard_Real)jarg6; 
  ((BRep_Builder const *)arg1)->UpdateVertex((TopoDS_Vertex const &)*arg2,arg3,arg4,(TopoDS_Face const &)*arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Builder_1updateVertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  Standard_Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRep_Builder **)&jarg1; 
  arg2 = *(TopoDS_Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return ;
  } 
  arg3 = (Standard_Real)jarg3; 
  ((BRep_Builder const *)arg1)->UpdateVertex((TopoDS_Vertex const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRep_1Builder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRep_Builder *arg1 = (BRep_Builder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRep_Builder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepFill_1Pipe_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepFill_Pipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepFill_Pipe *)new BRepFill_Pipe();
  *(BRepFill_Pipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepFill_1Pipe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  GeomFill_Trihedron arg3 ;
  Standard_Boolean arg4 ;
  Standard_Boolean arg5 ;
  BRepFill_Pipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg3 = (GeomFill_Trihedron)jarg3; 
  {
    arg4 = jarg4;
  }
  {
    arg5 = jarg5;
  }
  result = (BRepFill_Pipe *)new BRepFill_Pipe((TopoDS_Wire const &)*arg1,(TopoDS_Shape const &)*arg2,arg3,arg4,arg5);
  *(BRepFill_Pipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepFill_1Pipe_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  GeomFill_Trihedron arg3 ;
  Standard_Boolean arg4 ;
  BRepFill_Pipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg3 = (GeomFill_Trihedron)jarg3; 
  {
    arg4 = jarg4;
  }
  result = (BRepFill_Pipe *)new BRepFill_Pipe((TopoDS_Wire const &)*arg1,(TopoDS_Shape const &)*arg2,arg3,arg4);
  *(BRepFill_Pipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepFill_1Pipe_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  GeomFill_Trihedron arg3 ;
  BRepFill_Pipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg3 = (GeomFill_Trihedron)jarg3; 
  result = (BRepFill_Pipe *)new BRepFill_Pipe((TopoDS_Wire const &)*arg1,(TopoDS_Shape const &)*arg2,arg3);
  *(BRepFill_Pipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepFill_1Pipe_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepFill_Pipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepFill_Pipe *)new BRepFill_Pipe((TopoDS_Wire const &)*arg1,(TopoDS_Shape const &)*arg2);
  *(BRepFill_Pipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1perform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  Standard_Boolean arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    arg4 = jarg4;
  }
  (arg1)->Perform((TopoDS_Wire const &)*arg2,(TopoDS_Shape const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1perform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Perform((TopoDS_Wire const &)*arg2,(TopoDS_Shape const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1spine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepFill_Pipe const *)arg1)->Spine();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1Profile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepFill_Pipe const *)arg1)->Profile();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepFill_Pipe const *)arg1)->Shape();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1firstShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepFill_Pipe const *)arg1)->FirstShape();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1lastShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepFill_Pipe const *)arg1)->LastShape();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1face(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Edge *arg3 = 0 ;
  TopoDS_Face result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Edge **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (arg1)->Face((TopoDS_Edge const &)*arg2,(TopoDS_Edge const &)*arg3);
  *(TopoDS_Face **)&jresult = new TopoDS_Face((const TopoDS_Face &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1edge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  TopoDS_Edge result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  result = (arg1)->Edge((TopoDS_Edge const &)*arg2,(TopoDS_Vertex const &)*arg3);
  *(TopoDS_Edge **)&jresult = new TopoDS_Edge((const TopoDS_Edge &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1section(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  arg2 = *(TopoDS_Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  result = ((BRepFill_Pipe const *)arg1)->Section((TopoDS_Vertex const &)*arg2);
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFill_1Pipe_1pipeLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  gp_Pnt *arg2 = 0 ;
  TopoDS_Wire result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  result = (arg1)->PipeLine((gp_Pnt const &)*arg2);
  *(TopoDS_Wire **)&jresult = new TopoDS_Wire((const TopoDS_Wire &)result); 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepFill_1Pipe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepFill_Pipe *arg1 = (BRepFill_Pipe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepFill_Pipe **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomLProp_1SLProps(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  Standard_Integer arg1 ;
  Standard_Real arg2 ;
  GeomLProp_SLProps *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Standard_Integer)jarg1; 
  arg2 = (Standard_Real)jarg2; 
  result = (GeomLProp_SLProps *)new GeomLProp_SLProps(arg1,arg2);
  *(GeomLProp_SLProps **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1setParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  (arg1)->SetParameters(arg2,arg3);
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  gp_Pnt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (gp_Pnt *) &((GeomLProp_SLProps const *)arg1)->Value();
  {
    jresult=XYZtoDoubleArray(jenv, result->XYZ());
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1d1U(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  gp_Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (gp_Vec *) &(arg1)->D1U();
  {
    jresult=XYZtoDoubleArray(jenv, result->XYZ());
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1d1V(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  gp_Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (gp_Vec *) &(arg1)->D1V();
  {
    jresult=XYZtoDoubleArray(jenv, result->XYZ());
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1d2U(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  gp_Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (gp_Vec *) &(arg1)->D2U();
  {
    jresult=XYZtoDoubleArray(jenv, result->XYZ());
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1d2V(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  gp_Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (gp_Vec *) &(arg1)->D2V();
  {
    jresult=XYZtoDoubleArray(jenv, result->XYZ());
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1dUV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  gp_Vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (gp_Vec *) &(arg1)->DUV();
  {
    jresult=XYZtoDoubleArray(jenv, result->XYZ());
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1isTangentUDefined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (arg1)->IsTangentUDefined();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1tangentU(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  gp_Dir *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  arg2 = *(gp_Dir **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Dir & reference is null");
    return ;
  } 
  (arg1)->TangentU(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1isTangentVDefined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (arg1)->IsTangentVDefined();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1tangentV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  gp_Dir *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  arg2 = *(gp_Dir **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Dir & reference is null");
    return ;
  } 
  (arg1)->TangentV(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1isNormalDefined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (arg1)->IsNormalDefined();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1isCurvatureDefined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (arg1)->IsCurvatureDefined();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1isUmbilic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (arg1)->IsUmbilic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1meanCurvature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (Standard_Real)(arg1)->MeanCurvature();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1gaussianCurvature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (Standard_Real)(arg1)->GaussianCurvature();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1setSurface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Handle_Geom_Surface *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  arg2 = *(Handle_Geom_Surface **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Surface const & reference is null");
    return ;
  } 
  (arg1)->SetSurface((Handle_Geom_Surface const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1normal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  GeomLProp_SLProps_normal(arg1,arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1normalArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jint jarg4) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  GeomLProp_SLProps_normalArray(arg1,arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1minCurvature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (Standard_Real)GeomLProp_SLProps_minCurvature(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1maxCurvature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  result = (Standard_Real)GeomLProp_SLProps_maxCurvature(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomLProp_1SLProps_1curvatureDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  GeomLProp_SLProps_curvatureDirection(arg1,arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GeomLProp_1SLProps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GeomLProp_SLProps *arg1 = (GeomLProp_SLProps *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GeomLProp_SLProps **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_CString arg2 ;
  BRep_Builder *arg3 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape & reference is null");
    return 0;
  } 
  {
    arg2 = const_cast<Standard_CString>(jenv->GetStringUTFChars(jarg2, 0));
  }
  arg3 = *(BRep_Builder **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BRep_Builder const & reference is null");
    return 0;
  } 
  result = BRepTools::Read(*arg1,arg2,(BRep_Builder const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_CString arg2 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    arg2 = const_cast<Standard_CString>(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = BRepTools::Write((TopoDS_Shape const &)*arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  TopoDS_Shape *arg1 = 0 ;
  Standard_OStream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  
  jnistreambuf buf(jenv, jarg2);
  Standard_OStream os(&buf);
  arg2=&os;
  
  BRepTools::Write((TopoDS_Shape const &)*arg1,*arg2);
  
  arg2->flush();
  
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1clean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopoDS_Shape *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  BRepTools::Clean((TopoDS_Shape const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_IStream *arg2 = 0 ;
  BRep_Builder *arg3 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape & reference is null");
    return 0;
  } 
  
  jnistreambuf buf(jenv, jarg2);
  Standard_IStream is(&buf);
  arg2=&is;
  
  arg3 = *(BRep_Builder **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BRep_Builder const & reference is null");
    return 0;
  } 
  result = BRepTools_read__SWIG_1(*arg1,*arg2,(BRep_Builder const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepTools(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepTools *arg1 = (BRepTools *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepTools **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepTools_1WireExplorer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepTools_WireExplorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepTools_WireExplorer *)new BRepTools_WireExplorer();
  *(BRepTools_WireExplorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepTools_1WireExplorer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  BRepTools_WireExplorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  result = (BRepTools_WireExplorer *)new BRepTools_WireExplorer((TopoDS_Wire const &)*arg1);
  *(BRepTools_WireExplorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepTools_1WireExplorer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  BRepTools_WireExplorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Face **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  result = (BRepTools_WireExplorer *)new BRepTools_WireExplorer((TopoDS_Wire const &)*arg1,(TopoDS_Face const &)*arg2);
  *(BRepTools_WireExplorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1WireExplorer_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepTools_WireExplorer **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return ;
  } 
  (arg1)->Init((TopoDS_Wire const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1WireExplorer_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  TopoDS_Face *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepTools_WireExplorer **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Face **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return ;
  } 
  (arg1)->Init((TopoDS_Wire const &)*arg2,(TopoDS_Face const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1WireExplorer_1more(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepTools_WireExplorer **)&jarg1; 
  result = ((BRepTools_WireExplorer const *)arg1)->More();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1WireExplorer_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepTools_WireExplorer **)&jarg1; 
  (arg1)->Next();
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1WireExplorer_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopoDS_Edge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepTools_WireExplorer **)&jarg1; 
  result = (TopoDS_Edge *) &((BRepTools_WireExplorer const *)arg1)->Current();
  *(TopoDS_Edge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1WireExplorer_1orientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopAbs_Orientation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepTools_WireExplorer **)&jarg1; 
  result = (TopAbs_Orientation)((BRepTools_WireExplorer const *)arg1)->Orientation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1WireExplorer_1currentVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  TopoDS_Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepTools_WireExplorer **)&jarg1; 
  result = (TopoDS_Vertex *) &((BRepTools_WireExplorer const *)arg1)->CurrentVertex();
  *(TopoDS_Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1WireExplorer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepTools_WireExplorer **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepTools_1WireExplorer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepTools_WireExplorer *arg1 = (BRepTools_WireExplorer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepTools_WireExplorer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepTools_1Quilt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepTools_Quilt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepTools_Quilt *)new BRepTools_Quilt();
  *(BRepTools_Quilt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1Quilt_1bind_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Edge *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepTools_Quilt **)&jarg1; 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Edge **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  (arg1)->Bind((TopoDS_Edge const &)*arg2,(TopoDS_Edge const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1Quilt_1bind_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepTools_Quilt **)&jarg1; 
  arg2 = *(TopoDS_Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return ;
  } 
  (arg1)->Bind((TopoDS_Vertex const &)*arg2,(TopoDS_Vertex const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1Quilt_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepTools_Quilt **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Add((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1Quilt_1isCopied(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepTools_Quilt **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = ((BRepTools_Quilt const *)arg1)->IsCopied((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1Quilt_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepTools_Quilt **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (TopoDS_Shape *) &((BRepTools_Quilt const *)arg1)->Copy((TopoDS_Shape const &)*arg2);
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepTools_1Quilt_1shells(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepTools_Quilt **)&jarg1; 
  result = ((BRepTools_Quilt const *)arg1)->Shells();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepTools_1Quilt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepTools_Quilt *arg1 = (BRepTools_Quilt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepTools_Quilt **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Command_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepBuilderAPI_Command *arg1 = (BRepBuilderAPI_Command *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Command **)&jarg1; 
  ((BRepBuilderAPI_Command const *)arg1)->Check();
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Command_1isDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepBuilderAPI_Command *arg1 = (BRepBuilderAPI_Command *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Command **)&jarg1; 
  result = ((BRepBuilderAPI_Command const *)arg1)->IsDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1Command(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_Command *arg1 = (BRepBuilderAPI_Command *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_Command **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeShape_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepBuilderAPI_MakeShape *arg1 = (BRepBuilderAPI_MakeShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_MakeShape **)&jarg1; 
  (arg1)->Build();
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeShape_1shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepBuilderAPI_MakeShape *arg1 = (BRepBuilderAPI_MakeShape *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_MakeShape **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepBuilderAPI_MakeShape const *)arg1)->Shape();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1MakeShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_MakeShape *arg1 = (BRepBuilderAPI_MakeShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_MakeShape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1ModifyShape_1modifiedShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BRepBuilderAPI_ModifyShape *arg1 = (BRepBuilderAPI_ModifyShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_ModifyShape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (TopoDS_Shape *) &((BRepBuilderAPI_ModifyShape const *)arg1)->ModifiedShape((TopoDS_Shape const &)*arg2);
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1ModifyShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_ModifyShape *arg1 = (BRepBuilderAPI_ModifyShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_ModifyShape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1Transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gp_Trsf *arg1 = 0 ;
  BRepBuilderAPI_Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Trsf **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Trsf const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_Transform *)new BRepBuilderAPI_Transform((gp_Trsf const &)*arg1);
  *(BRepBuilderAPI_Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1Transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Trsf *arg2 = 0 ;
  Standard_Boolean arg3 ;
  BRepBuilderAPI_Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(gp_Trsf **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Trsf const & reference is null");
    return 0;
  } 
  {
    arg3 = jarg3;
  }
  result = (BRepBuilderAPI_Transform *)new BRepBuilderAPI_Transform((TopoDS_Shape const &)*arg1,(gp_Trsf const &)*arg2,arg3);
  *(BRepBuilderAPI_Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1Transform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Trsf *arg2 = 0 ;
  BRepBuilderAPI_Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(gp_Trsf **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Trsf const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_Transform *)new BRepBuilderAPI_Transform((TopoDS_Shape const &)*arg1,(gp_Trsf const &)*arg2);
  *(BRepBuilderAPI_Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Transform_1perform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  BRepBuilderAPI_Transform *arg1 = (BRepBuilderAPI_Transform *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_Transform **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  (arg1)->Perform((TopoDS_Shape const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Transform_1perform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepBuilderAPI_Transform *arg1 = (BRepBuilderAPI_Transform *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_Transform **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Perform((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_Transform *arg1 = (BRepBuilderAPI_Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_Transform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeVertex(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1) {
  jlong jresult = 0 ;
  gp_Pnt *arg1 = 0 ;
  BRepBuilderAPI_MakeVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  result = (BRepBuilderAPI_MakeVertex *)new BRepBuilderAPI_MakeVertex((gp_Pnt const &)*arg1);
  *(BRepBuilderAPI_MakeVertex **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1MakeVertex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_MakeVertex *arg1 = (BRepBuilderAPI_MakeVertex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_MakeVertex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeWire_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire();
  *(BRepBuilderAPI_MakeWire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeWire_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Edge const &)*arg1);
  *(BRepBuilderAPI_MakeWire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeWire_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Edge const &)*arg1,(TopoDS_Edge const &)*arg2);
  *(BRepBuilderAPI_MakeWire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeWire_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Edge *arg3 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Edge **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Edge const &)*arg1,(TopoDS_Edge const &)*arg2,(TopoDS_Edge const &)*arg3);
  *(BRepBuilderAPI_MakeWire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeWire_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Edge *arg3 = 0 ;
  TopoDS_Edge *arg4 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Edge **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg4 = *(TopoDS_Edge **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Edge const &)*arg1,(TopoDS_Edge const &)*arg2,(TopoDS_Edge const &)*arg3,(TopoDS_Edge const &)*arg4);
  *(BRepBuilderAPI_MakeWire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeWire_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Wire const &)*arg1);
  *(BRepBuilderAPI_MakeWire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeWire_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Edge *arg2 = 0 ;
  BRepBuilderAPI_MakeWire *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeWire *)new BRepBuilderAPI_MakeWire((TopoDS_Wire const &)*arg1,(TopoDS_Edge const &)*arg2);
  *(BRepBuilderAPI_MakeWire **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeWire_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_MakeWire **)&jarg1; 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  (arg1)->Add((TopoDS_Edge const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeWire_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_MakeWire **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return ;
  } 
  (arg1)->Add((TopoDS_Wire const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeWire_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  TopTools_ListOfShape *arg2 = 0 ;
  jlong *jarr2 ;
  jsize sz2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_MakeWire **)&jarg1; 
  {
    int i;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2)
    {
      return ;
    }
    arg2 = new TopTools_ListOfShape();
    for (i=0; i<sz2; i++)
    {
      arg2->Append(*(TopoDS_Shape*)jarr2[i]);
    }
  }
  (arg1)->Add((TopTools_ListOfShape const &)*arg2);
  
  delete arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeWire_1isDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_MakeWire **)&jarg1; 
  result = ((BRepBuilderAPI_MakeWire const *)arg1)->IsDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1MakeWire(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_MakeWire *arg1 = (BRepBuilderAPI_MakeWire *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_MakeWire **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge();
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Curve const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((Handle_Geom_Curve const &)*arg1);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Vertex *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Vertex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((TopoDS_Vertex const &)*arg1,(TopoDS_Vertex const &)*arg2);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Pnt const &)*arg1,(gp_Pnt const &)*arg2);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gp_Circ *arg1 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Circ **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Circ const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Circ const &)*arg1);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  gp_Circ *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Circ **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Circ const & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Circ const &)*arg1,arg2,arg3);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  jlong jresult = 0 ;
  gp_Circ *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Circ **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Circ const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  {
    if(jenv->GetArrayLength(jarg3)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg3, NULL);
    arg3=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Circ const &)*arg1,(gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  gp_Circ *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(gp_Circ **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Circ const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Circ const &)*arg1,(TopoDS_Vertex const &)*arg2,(TopoDS_Vertex const &)*arg3);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gp_Parab *arg1 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Parab **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Parab const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Parab const &)*arg1);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  gp_Parab *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Parab **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Parab const & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Parab const &)*arg1,arg2,arg3);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  jlong jresult = 0 ;
  gp_Parab *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Parab **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Parab const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  {
    if(jenv->GetArrayLength(jarg3)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg3, NULL);
    arg3=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Parab const &)*arg1,(gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeEdge_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  gp_Parab *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  BRepBuilderAPI_MakeEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(gp_Parab **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Parab const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeEdge *)new BRepBuilderAPI_MakeEdge((gp_Parab const &)*arg1,(TopoDS_Vertex const &)*arg2,(TopoDS_Vertex const &)*arg3);
  *(BRepBuilderAPI_MakeEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeEdge_1isDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepBuilderAPI_MakeEdge *arg1 = (BRepBuilderAPI_MakeEdge *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_MakeEdge **)&jarg1; 
  result = ((BRepBuilderAPI_MakeEdge const *)arg1)->IsDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1MakeEdge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_MakeEdge *arg1 = (BRepBuilderAPI_MakeEdge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_MakeEdge **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeFace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  Standard_Boolean arg2 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  {
    arg2 = jarg2;
  }
  result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((TopoDS_Wire const &)*arg1,arg2);
  *(BRepBuilderAPI_MakeFace **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeFace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((TopoDS_Wire const &)*arg1);
  *(BRepBuilderAPI_MakeFace **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeFace_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Face *arg1 = 0 ;
  TopoDS_Wire *arg2 = 0 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Face **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((TopoDS_Face const &)*arg1,(TopoDS_Wire const &)*arg2);
  *(BRepBuilderAPI_MakeFace **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeFace_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Handle_Geom_Surface *arg1 = 0 ;
  Standard_Real arg2 ;
  BRepBuilderAPI_MakeFace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Surface **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Surface const & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  result = (BRepBuilderAPI_MakeFace *)new BRepBuilderAPI_MakeFace((Handle_Geom_Surface const &)*arg1,arg2);
  *(BRepBuilderAPI_MakeFace **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1MakeFace(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_MakeFace *arg1 = (BRepBuilderAPI_MakeFace *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_MakeFace **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeSolid_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid();
  *(BRepBuilderAPI_MakeSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeSolid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_CompSolid *arg1 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_CompSolid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_CompSolid const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_CompSolid const &)*arg1);
  *(BRepBuilderAPI_MakeSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeSolid_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shell *arg1 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shell **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shell const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Shell const &)*arg1);
  *(BRepBuilderAPI_MakeSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeSolid_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Shell *arg1 = 0 ;
  TopoDS_Shell *arg2 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shell **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shell const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shell **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shell const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Shell const &)*arg1,(TopoDS_Shell const &)*arg2);
  *(BRepBuilderAPI_MakeSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeSolid_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  TopoDS_Shell *arg1 = 0 ;
  TopoDS_Shell *arg2 = 0 ;
  TopoDS_Shell *arg3 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Shell **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shell const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shell **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shell const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Shell **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shell const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Shell const &)*arg1,(TopoDS_Shell const &)*arg2,(TopoDS_Shell const &)*arg3);
  *(BRepBuilderAPI_MakeSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeSolid_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Solid *arg1 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Solid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Solid const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Solid const &)*arg1);
  *(BRepBuilderAPI_MakeSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1MakeSolid_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Solid *arg1 = 0 ;
  TopoDS_Shell *arg2 = 0 ;
  BRepBuilderAPI_MakeSolid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Solid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Solid const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shell **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shell const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_MakeSolid *)new BRepBuilderAPI_MakeSolid((TopoDS_Solid const &)*arg1,(TopoDS_Shell const &)*arg2);
  *(BRepBuilderAPI_MakeSolid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeSolid_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepBuilderAPI_MakeSolid *arg1 = (BRepBuilderAPI_MakeSolid *) 0 ;
  TopoDS_Shell *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_MakeSolid **)&jarg1; 
  arg2 = *(TopoDS_Shell **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shell const & reference is null");
    return ;
  } 
  (arg1)->Add((TopoDS_Shell const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeSolid_1isDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepBuilderAPI_MakeSolid *arg1 = (BRepBuilderAPI_MakeSolid *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_MakeSolid **)&jarg1; 
  result = ((BRepBuilderAPI_MakeSolid const *)arg1)->IsDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeSolid_1isDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BRepBuilderAPI_MakeSolid *arg1 = (BRepBuilderAPI_MakeSolid *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_MakeSolid **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (arg1)->IsDeleted((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1MakeSolid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_MakeSolid *arg1 = (BRepBuilderAPI_MakeSolid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_MakeSolid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1Sewing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  Standard_Real arg1 ;
  Standard_Boolean arg2 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Standard_Real)jarg1; 
  {
    arg2 = jarg2;
  }
  {
    arg3 = jarg3;
  }
  {
    arg4 = jarg4;
  }
  result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing(arg1,arg2,arg3,arg4);
  *(BRepBuilderAPI_Sewing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1Sewing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  Standard_Real arg1 ;
  Standard_Boolean arg2 ;
  Standard_Boolean arg3 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Standard_Real)jarg1; 
  {
    arg2 = jarg2;
  }
  {
    arg3 = jarg3;
  }
  result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing(arg1,arg2,arg3);
  *(BRepBuilderAPI_Sewing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1Sewing_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  Standard_Real arg1 ;
  Standard_Boolean arg2 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Standard_Real)jarg1; 
  {
    arg2 = jarg2;
  }
  result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing(arg1,arg2);
  *(BRepBuilderAPI_Sewing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1Sewing_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  Standard_Real arg1 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Standard_Real)jarg1; 
  result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing(arg1);
  *(BRepBuilderAPI_Sewing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1Sewing_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepBuilderAPI_Sewing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepBuilderAPI_Sewing *)new BRepBuilderAPI_Sewing();
  *(BRepBuilderAPI_Sewing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  Standard_Boolean arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  {
    arg3 = jarg3;
  }
  {
    arg4 = jarg4;
  }
  {
    arg5 = jarg5;
  }
  (arg1)->Init(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3, jboolean jarg4) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  {
    arg3 = jarg3;
  }
  {
    arg4 = jarg4;
  }
  (arg1)->Init(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1init_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  {
    arg3 = jarg3;
  }
  (arg1)->Init(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1init_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Load((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Add((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  (arg1)->Perform();
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1sewedShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepBuilderAPI_Sewing const *)arg1)->SewedShape();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1nbFreeEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  result = (Standard_Integer)((BRepBuilderAPI_Sewing const *)arg1)->NbFreeEdges();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1freeEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Edge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  result = (TopoDS_Edge *) &((BRepBuilderAPI_Sewing const *)arg1)->FreeEdge(arg2);
  *(TopoDS_Edge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1nbMultipleEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  result = (Standard_Integer)((BRepBuilderAPI_Sewing const *)arg1)->NbMultipleEdges();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1multipleEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Edge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  result = (TopoDS_Edge *) &((BRepBuilderAPI_Sewing const *)arg1)->MultipleEdge(arg2);
  *(TopoDS_Edge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1nbDegeneratedShapes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  result = (Standard_Integer)((BRepBuilderAPI_Sewing const *)arg1)->NbDegeneratedShapes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1degeneratedShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  result = (TopoDS_Shape *) &((BRepBuilderAPI_Sewing const *)arg1)->DegeneratedShape(arg2);
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1nbDeletedFaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  result = (Standard_Integer)((BRepBuilderAPI_Sewing const *)arg1)->NbDeletedFaces();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1deletedFace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  Standard_Integer arg2 ;
  TopoDS_Face *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  result = (TopoDS_Face *) &((BRepBuilderAPI_Sewing const *)arg1)->DeletedFace(arg2);
  *(TopoDS_Face **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1isDegenerated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = ((BRepBuilderAPI_Sewing const *)arg1)->IsDegenerated((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1isModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = ((BRepBuilderAPI_Sewing const *)arg1)->IsModified((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1modified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (TopoDS_Shape *) &((BRepBuilderAPI_Sewing const *)arg1)->Modified((TopoDS_Shape const &)*arg2);
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  ((BRepBuilderAPI_Sewing const *)arg1)->Dump();
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1isModifiedSubShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = ((BRepBuilderAPI_Sewing const *)arg1)->IsModifiedSubShape((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Sewing_1modifiedSubShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = ((BRepBuilderAPI_Sewing const *)arg1)->ModifiedSubShape((TopoDS_Shape const &)*arg2);
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1Sewing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_Sewing *arg1 = (BRepBuilderAPI_Sewing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_Sewing **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1NurbsConvert_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepBuilderAPI_NurbsConvert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepBuilderAPI_NurbsConvert *)new BRepBuilderAPI_NurbsConvert();
  *(BRepBuilderAPI_NurbsConvert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1NurbsConvert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  BRepBuilderAPI_NurbsConvert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    arg2 = jarg2;
  }
  result = (BRepBuilderAPI_NurbsConvert *)new BRepBuilderAPI_NurbsConvert((TopoDS_Shape const &)*arg1,arg2);
  *(BRepBuilderAPI_NurbsConvert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBuilderAPI_1NurbsConvert_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepBuilderAPI_NurbsConvert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepBuilderAPI_NurbsConvert *)new BRepBuilderAPI_NurbsConvert((TopoDS_Shape const &)*arg1);
  *(BRepBuilderAPI_NurbsConvert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1NurbsConvert_1perform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  BRepBuilderAPI_NurbsConvert *arg1 = (BRepBuilderAPI_NurbsConvert *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_NurbsConvert **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  (arg1)->Perform((TopoDS_Shape const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1NurbsConvert_1perform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepBuilderAPI_NurbsConvert *arg1 = (BRepBuilderAPI_NurbsConvert *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepBuilderAPI_NurbsConvert **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Perform((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBuilderAPI_1NurbsConvert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBuilderAPI_NurbsConvert *arg1 = (BRepBuilderAPI_NurbsConvert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBuilderAPI_NurbsConvert **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeBox(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  BRepPrimAPI_MakeBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  result = (BRepPrimAPI_MakeBox *)new BRepPrimAPI_MakeBox((gp_Pnt const &)*arg1,(gp_Pnt const &)*arg2);
  *(BRepPrimAPI_MakeBox **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepPrimAPI_1MakeBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepPrimAPI_MakeBox *arg1 = (BRepPrimAPI_MakeBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepPrimAPI_MakeBox **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeCone(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  BRepPrimAPI_MakeCone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Ax2(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  arg5 = (Standard_Real)jarg5; 
  result = (BRepPrimAPI_MakeCone *)new BRepPrimAPI_MakeCone((gp_Ax2 const &)*arg1,arg2,arg3,arg4,arg5);
  *(BRepPrimAPI_MakeCone **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepPrimAPI_1MakeCone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepPrimAPI_MakeCone *arg1 = (BRepPrimAPI_MakeCone *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepPrimAPI_MakeCone **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeCylinder(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  BRepPrimAPI_MakeCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Ax2(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  result = (BRepPrimAPI_MakeCylinder *)new BRepPrimAPI_MakeCylinder((gp_Ax2 const &)*arg1,arg2,arg3,arg4);
  *(BRepPrimAPI_MakeCylinder **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepPrimAPI_1MakeCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepPrimAPI_MakeCylinder *arg1 = (BRepPrimAPI_MakeCylinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepPrimAPI_MakeCylinder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeTorus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  BRepPrimAPI_MakeTorus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Ax2(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  result = (BRepPrimAPI_MakeTorus *)new BRepPrimAPI_MakeTorus((gp_Ax2 const &)*arg1,arg2,arg3);
  *(BRepPrimAPI_MakeTorus **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeTorus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Standard_Real arg6 ;
  BRepPrimAPI_MakeTorus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Ax2(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  arg5 = (Standard_Real)jarg5; 
  arg6 = (Standard_Real)jarg6; 
  result = (BRepPrimAPI_MakeTorus *)new BRepPrimAPI_MakeTorus((gp_Ax2 const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  *(BRepPrimAPI_MakeTorus **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepPrimAPI_1MakeTorus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepPrimAPI_MakeTorus *arg1 = (BRepPrimAPI_MakeTorus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepPrimAPI_MakeTorus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeSphere_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  gp_Pnt *arg1 = 0 ;
  Standard_Real arg2 ;
  BRepPrimAPI_MakeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  arg2 = (Standard_Real)jarg2; 
  result = (BRepPrimAPI_MakeSphere *)new BRepPrimAPI_MakeSphere((gp_Pnt const &)*arg1,arg2);
  *(BRepPrimAPI_MakeSphere **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeSphere_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  gp_Ax2 *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  BRepPrimAPI_MakeSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Ax2(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  arg5 = (Standard_Real)jarg5; 
  result = (BRepPrimAPI_MakeSphere *)new BRepPrimAPI_MakeSphere((gp_Ax2 const &)*arg1,arg2,arg3,arg4,arg5);
  *(BRepPrimAPI_MakeSphere **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepPrimAPI_1MakeSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepPrimAPI_MakeSphere *arg1 = (BRepPrimAPI_MakeSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepPrimAPI_MakeSphere **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepPrimAPI_1MakeSweep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepPrimAPI_MakeSweep *arg1 = (BRepPrimAPI_MakeSweep *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepPrimAPI_MakeSweep **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakePrism_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Vec *arg2 = 0 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  BRepPrimAPI_MakePrism *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Vec(naxe[0],naxe[1],naxe[2]);
  }
  {
    arg3 = jarg3;
  }
  {
    arg4 = jarg4;
  }
  result = (BRepPrimAPI_MakePrism *)new BRepPrimAPI_MakePrism((TopoDS_Shape const &)*arg1,(gp_Vec const &)*arg2,arg3,arg4);
  *(BRepPrimAPI_MakePrism **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakePrism_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Vec *arg2 = 0 ;
  Standard_Boolean arg3 ;
  BRepPrimAPI_MakePrism *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Vec(naxe[0],naxe[1],naxe[2]);
  }
  {
    arg3 = jarg3;
  }
  result = (BRepPrimAPI_MakePrism *)new BRepPrimAPI_MakePrism((TopoDS_Shape const &)*arg1,(gp_Vec const &)*arg2,arg3);
  *(BRepPrimAPI_MakePrism **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakePrism_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Vec *arg2 = 0 ;
  BRepPrimAPI_MakePrism *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Vec(naxe[0],naxe[1],naxe[2]);
  }
  result = (BRepPrimAPI_MakePrism *)new BRepPrimAPI_MakePrism((TopoDS_Shape const &)*arg1,(gp_Vec const &)*arg2);
  *(BRepPrimAPI_MakePrism **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepPrimAPI_1MakePrism(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepPrimAPI_MakePrism *arg1 = (BRepPrimAPI_MakePrism *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepPrimAPI_MakePrism **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeRevol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdouble jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 ;
  BRepPrimAPI_MakeRevol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Ax1(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg3 = (Standard_Real)jarg3; 
  {
    arg4 = jarg4;
  }
  result = (BRepPrimAPI_MakeRevol *)new BRepPrimAPI_MakeRevol((TopoDS_Shape const &)*arg1,(gp_Ax1 const &)*arg2,arg3,arg4);
  *(BRepPrimAPI_MakeRevol **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeRevol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Real arg3 ;
  BRepPrimAPI_MakeRevol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Ax1(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  arg3 = (Standard_Real)jarg3; 
  result = (BRepPrimAPI_MakeRevol *)new BRepPrimAPI_MakeRevol((TopoDS_Shape const &)*arg1,(gp_Ax1 const &)*arg2,arg3);
  *(BRepPrimAPI_MakeRevol **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeRevol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Ax1 *arg2 = 0 ;
  Standard_Boolean arg3 ;
  BRepPrimAPI_MakeRevol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Ax1(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  {
    arg3 = jarg3;
  }
  result = (BRepPrimAPI_MakeRevol *)new BRepPrimAPI_MakeRevol((TopoDS_Shape const &)*arg1,(gp_Ax1 const &)*arg2,arg3);
  *(BRepPrimAPI_MakeRevol **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepPrimAPI_1MakeRevol_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  gp_Ax1 *arg2 = 0 ;
  BRepPrimAPI_MakeRevol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Ax1(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  result = (BRepPrimAPI_MakeRevol *)new BRepPrimAPI_MakeRevol((TopoDS_Shape const &)*arg1,(gp_Ax1 const &)*arg2);
  *(BRepPrimAPI_MakeRevol **)&jresult = result; 
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepPrimAPI_1MakeRevol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepPrimAPI_MakeRevol *arg1 = (BRepPrimAPI_MakeRevol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepPrimAPI_MakeRevol **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlongArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1BooleanOperation_1modified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlongArray jresult = 0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopTools_ListOfShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepAlgoAPI_BooleanOperation **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (TopTools_ListOfShape *) &(arg1)->Modified((TopoDS_Shape const &)*arg2);
  {
    int j,n;
    const TopTools_ListOfShape& l = *result;
    n = l.Extent();
    jlong * as=(jlong*) malloc (sizeof(jlong) * n * 2);
    TopTools_ListIteratorOfListOfShape it(l);
    j=0;
    while(it.More())
    {
      const TopoDS_Shape & s=it.Value();
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(s.TShape());
      tsp->Location(s.Location());
      tsp->Orientation(s.Orientation());
      as[j++]=(jlong)tsp;
      as[j++]=s.ShapeType();
      it.Next();
    }
    jlongArray jarray=jenv->NewLongArray(n*2);
    jenv->SetLongArrayRegion(jarray, 0, n*2, as);
    free(as);
    jresult=jarray;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1BooleanOperation_1isDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepAlgoAPI_BooleanOperation **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (arg1)->IsDeleted((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1BooleanOperation_1generated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlongArray jresult = 0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopTools_ListOfShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepAlgoAPI_BooleanOperation **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (TopTools_ListOfShape *) &(arg1)->Generated((TopoDS_Shape const &)*arg2);
  {
    int j,n;
    const TopTools_ListOfShape& l = *result;
    n = l.Extent();
    jlong * as=(jlong*) malloc (sizeof(jlong) * n * 2);
    TopTools_ListIteratorOfListOfShape it(l);
    j=0;
    while(it.More())
    {
      const TopoDS_Shape & s=it.Value();
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(s.TShape());
      tsp->Location(s.Location());
      tsp->Orientation(s.Orientation());
      as[j++]=(jlong)tsp;
      as[j++]=s.ShapeType();
      it.Next();
    }
    jlongArray jarray=jenv->NewLongArray(n*2);
    jenv->SetLongArrayRegion(jarray, 0, n*2, as);
    free(as);
    jresult=jarray;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1BooleanOperation_1hasModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAlgoAPI_BooleanOperation **)&jarg1; 
  result = ((BRepAlgoAPI_BooleanOperation const *)arg1)->HasModified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1BooleanOperation_1hasGenerated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAlgoAPI_BooleanOperation **)&jarg1; 
  result = ((BRepAlgoAPI_BooleanOperation const *)arg1)->HasGenerated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1BooleanOperation_1hasDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAlgoAPI_BooleanOperation **)&jarg1; 
  result = ((BRepAlgoAPI_BooleanOperation const *)arg1)->HasDeleted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepAlgoAPI_1BooleanOperation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepAlgoAPI_BooleanOperation *arg1 = (BRepAlgoAPI_BooleanOperation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepAlgoAPI_BooleanOperation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepAlgoAPI_1Fuse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepAlgoAPI_Fuse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepAlgoAPI_Fuse *)new BRepAlgoAPI_Fuse((TopoDS_Shape const &)*arg1,(TopoDS_Shape const &)*arg2);
  *(BRepAlgoAPI_Fuse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepAlgoAPI_1Fuse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepAlgoAPI_Fuse *arg1 = (BRepAlgoAPI_Fuse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepAlgoAPI_Fuse **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepAlgoAPI_1Common(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepAlgoAPI_Common *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepAlgoAPI_Common *)new BRepAlgoAPI_Common((TopoDS_Shape const &)*arg1,(TopoDS_Shape const &)*arg2);
  *(BRepAlgoAPI_Common **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepAlgoAPI_1Common(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepAlgoAPI_Common *arg1 = (BRepAlgoAPI_Common *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepAlgoAPI_Common **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepAlgoAPI_1Cut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepAlgoAPI_Cut *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepAlgoAPI_Cut *)new BRepAlgoAPI_Cut((TopoDS_Shape const &)*arg1,(TopoDS_Shape const &)*arg2);
  *(BRepAlgoAPI_Cut **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepAlgoAPI_1Cut(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepAlgoAPI_Cut *arg1 = (BRepAlgoAPI_Cut *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepAlgoAPI_Cut **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepAlgoAPI_1Section(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepAlgoAPI_Section *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepAlgoAPI_Section *)new BRepAlgoAPI_Section((TopoDS_Shape const &)*arg1,(TopoDS_Shape const &)*arg2);
  *(BRepAlgoAPI_Section **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepAlgoAPI_1Section(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepAlgoAPI_Section *arg1 = (BRepAlgoAPI_Section *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepAlgoAPI_Section **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1NormalProjection_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepOffsetAPI_NormalProjection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepOffsetAPI_NormalProjection *)new BRepOffsetAPI_NormalProjection();
  *(BRepOffsetAPI_NormalProjection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1NormalProjection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepOffsetAPI_NormalProjection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepOffsetAPI_NormalProjection *)new BRepOffsetAPI_NormalProjection((TopoDS_Shape const &)*arg1);
  *(BRepOffsetAPI_NormalProjection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Init((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Add((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1setParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jint jarg4, jint jarg5, jint jarg6) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  GeomAbs_Shape arg4 ;
  Standard_Integer arg5 ;
  Standard_Integer arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (GeomAbs_Shape)jarg4; 
  arg5 = (Standard_Integer)jarg5; 
  arg6 = (Standard_Integer)jarg6; 
  (arg1)->SetParams(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1setMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  (arg1)->SetMaxDistance(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1setLimit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  {
    arg2 = jarg2;
  }
  (arg1)->SetLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1setLimit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  (arg1)->SetLimit();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1compute3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  {
    arg2 = jarg2;
  }
  (arg1)->Compute3d(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1compute3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  (arg1)->Compute3d();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  (arg1)->Build();
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1isDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  result = ((BRepOffsetAPI_NormalProjection const *)arg1)->IsDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1projection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepOffsetAPI_NormalProjection const *)arg1)->Projection();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1couple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (TopoDS_Shape *) &((BRepOffsetAPI_NormalProjection const *)arg1)->Couple((TopoDS_Edge const &)*arg2);
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1generated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlongArray jresult = 0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopTools_ListOfShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (TopTools_ListOfShape *) &(arg1)->Generated((TopoDS_Shape const &)*arg2);
  {
    int j,n;
    const TopTools_ListOfShape& l = *result;
    n = l.Extent();
    jlong * as=(jlong*) malloc (sizeof(jlong) * n * 2);
    TopTools_ListIteratorOfListOfShape it(l);
    j=0;
    while(it.More())
    {
      const TopoDS_Shape & s=it.Value();
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(s.TShape());
      tsp->Location(s.Location());
      tsp->Orientation(s.Orientation());
      as[j++]=(jlong)tsp;
      as[j++]=s.ShapeType();
      it.Next();
    }
    jlongArray jarray=jenv->NewLongArray(n*2);
    jenv->SetLongArrayRegion(jarray, 0, n*2, as);
    free(as);
    jresult=jarray;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1ancestor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (TopoDS_Shape *) &((BRepOffsetAPI_NormalProjection const *)arg1)->Ancestor((TopoDS_Edge const &)*arg2);
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1buildWire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  TopTools_ListOfShape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  arg2 = *(TopTools_ListOfShape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopTools_ListOfShape & reference is null");
    return 0;
  } 
  result = ((BRepOffsetAPI_NormalProjection const *)arg1)->BuildWire(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepOffsetAPI_1NormalProjection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepOffsetAPI_NormalProjection *arg1 = (BRepOffsetAPI_NormalProjection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepOffsetAPI_NormalProjection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1MakePipe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepOffsetAPI_MakePipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    try	{
      OCC_CATCH_SIGNALS
      result = (BRepOffsetAPI_MakePipe *)new BRepOffsetAPI_MakePipe((TopoDS_Wire const &)*arg1,(TopoDS_Shape const &)*arg2);
    }
    catch(Standard_Failure) {
      cout << "build EXCEPTION IN OCE" << endl;
      // return 0;
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
      // return 0;
    }
  }
  *(BRepOffsetAPI_MakePipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1MakePipe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  GeomFill_Trihedron arg3 ;
  Standard_Boolean arg4 ;
  BRepOffsetAPI_MakePipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg3 = (GeomFill_Trihedron)jarg3; 
  {
    arg4 = jarg4;
  }
  {
    try	{
      OCC_CATCH_SIGNALS
      result = (BRepOffsetAPI_MakePipe *)new BRepOffsetAPI_MakePipe((TopoDS_Wire const &)*arg1,(TopoDS_Shape const &)*arg2,arg3,arg4);
    }
    catch(Standard_Failure) {
      cout << "build EXCEPTION IN OCE" << endl;
      // return 0;
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
      // return 0;
    }
  }
  *(BRepOffsetAPI_MakePipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1MakePipe_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  GeomFill_Trihedron arg3 ;
  BRepOffsetAPI_MakePipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg3 = (GeomFill_Trihedron)jarg3; 
  {
    try	{
      OCC_CATCH_SIGNALS
      result = (BRepOffsetAPI_MakePipe *)new BRepOffsetAPI_MakePipe((TopoDS_Wire const &)*arg1,(TopoDS_Shape const &)*arg2,arg3);
    }
    catch(Standard_Failure) {
      cout << "build EXCEPTION IN OCE" << endl;
      // return 0;
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
      // return 0;
    }
  }
  *(BRepOffsetAPI_MakePipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipe_1pipe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepOffsetAPI_MakePipe *arg1 = (BRepOffsetAPI_MakePipe *) 0 ;
  BRepFill_Pipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipe **)&jarg1; 
  result = (BRepFill_Pipe *) &((BRepOffsetAPI_MakePipe const *)arg1)->Pipe();
  *(BRepFill_Pipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipe_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepOffsetAPI_MakePipe *arg1 = (BRepOffsetAPI_MakePipe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipe **)&jarg1; 
  (arg1)->Build();
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipe_1firstShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepOffsetAPI_MakePipe *arg1 = (BRepOffsetAPI_MakePipe *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipe **)&jarg1; 
  result = (arg1)->FirstShape();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipe_1lastShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepOffsetAPI_MakePipe *arg1 = (BRepOffsetAPI_MakePipe *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipe **)&jarg1; 
  result = (arg1)->LastShape();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipe_1generated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  BRepOffsetAPI_MakePipe *arg1 = (BRepOffsetAPI_MakePipe *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepOffsetAPI_MakePipe **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg3 = *(TopoDS_Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (arg1)->Generated((TopoDS_Shape const &)*arg2,(TopoDS_Shape const &)*arg3);
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepOffsetAPI_1MakePipe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepOffsetAPI_MakePipe *arg1 = (BRepOffsetAPI_MakePipe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepOffsetAPI_MakePipe **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1MakePipeShell(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Wire *arg1 = 0 ;
  BRepOffsetAPI_MakePipeShell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Wire **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return 0;
  } 
  result = (BRepOffsetAPI_MakePipeShell *)new BRepOffsetAPI_MakePipeShell((TopoDS_Wire const &)*arg1);
  *(BRepOffsetAPI_MakePipeShell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1SetMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  {
    arg2 = jarg2;
  }
  (arg1)->SetMode(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1SetMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  (arg1)->SetMode();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setDiscreteMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  (arg1)->SetDiscreteMode();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setModeAx2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  gp_Ax2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  {
    if(jenv->GetArrayLength(jarg2)!=6)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 6");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Ax2(gp_Pnt(naxe[0],naxe[1],naxe[2]), gp_Dir(naxe[3], naxe[4], naxe[5]));
  }
  (arg1)->SetMode((gp_Ax2 const &)*arg2);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setModeBiNormal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  gp_Dir *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Dir(naxe[0],naxe[1],naxe[2]);
  }
  (arg1)->SetMode((gp_Dir const &)*arg2);
  {
    delete arg2;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1SetMode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (arg1)->SetMode((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1SetMode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  Standard_Boolean arg3 ;
  BRepFill_TypeOfContact arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  arg4 = (BRepFill_TypeOfContact)jarg4; 
  (arg1)->SetMode((TopoDS_Wire const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1SetMode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  (arg1)->SetMode((TopoDS_Wire const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1add1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  Standard_Boolean arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  {
    arg4 = jarg4;
  }
  {
    try	{
      OCC_CATCH_SIGNALS
      (arg1)->Add((TopoDS_Shape const &)*arg2,arg3,arg4);
    }
    catch(Standard_Failure) {
      cout << "add EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1add1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  {
    try	{
      OCC_CATCH_SIGNALS
      (arg1)->Add((TopoDS_Shape const &)*arg2,arg3);
    }
    catch(Standard_Failure) {
      cout << "add EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1add1_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    try	{
      OCC_CATCH_SIGNALS
      (arg1)->Add((TopoDS_Shape const &)*arg2);
    }
    catch(Standard_Failure) {
      cout << "add EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1add2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  Standard_Boolean arg4 ;
  Standard_Boolean arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return ;
  } 
  {
    arg4 = jarg4;
  }
  {
    arg5 = jarg5;
  }
  {
    try	{
      OCC_CATCH_SIGNALS
      (arg1)->Add((TopoDS_Shape const &)*arg2,(TopoDS_Vertex const &)*arg3,arg4,arg5);
    }
    catch(Standard_Failure) {
      cout << "add EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1add2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  Standard_Boolean arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return ;
  } 
  {
    arg4 = jarg4;
  }
  {
    try	{
      OCC_CATCH_SIGNALS
      (arg1)->Add((TopoDS_Shape const &)*arg2,(TopoDS_Vertex const &)*arg3,arg4);
    }
    catch(Standard_Failure) {
      cout << "add EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1add2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex const & reference is null");
    return ;
  } 
  {
    try	{
      OCC_CATCH_SIGNALS
      (arg1)->Add((TopoDS_Shape const &)*arg2,(TopoDS_Vertex const &)*arg3);
    }
    catch(Standard_Failure) {
      cout << "add EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Delete((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1isReady(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  result = ((BRepOffsetAPI_MakePipeShell const *)arg1)->IsReady();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  BRepBuilderAPI_PipeError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  result = (BRepBuilderAPI_PipeError)((BRepOffsetAPI_MakePipeShell const *)arg1)->GetStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setTolerance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  (arg1)->SetTolerance(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setTolerance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  (arg1)->SetTolerance(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setTolerance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  Standard_Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  (arg1)->SetTolerance(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setTolerance_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  (arg1)->SetTolerance();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setForceApproxC1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  {
    arg2 = jarg2;
  }
  (arg1)->SetForceApproxC1(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setTransitionMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  BRepBuilderAPI_TransitionMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = (BRepBuilderAPI_TransitionMode)jarg2; 
  (arg1)->SetTransitionMode(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1setTransitionMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  (arg1)->SetTransitionMode();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1simulate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  Standard_Integer arg2 ;
  TopTools_ListOfShape *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  arg3 = *(TopTools_ListOfShape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopTools_ListOfShape & reference is null");
    return ;
  } 
  (arg1)->Simulate(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  {
    try	{
      OCC_CATCH_SIGNALS
      (arg1)->Build();
    }
    catch(Standard_Failure) {
      cout << "build EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1makeSolid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  result = (arg1)->MakeSolid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1firstShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  result = (arg1)->FirstShape();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1lastShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  result = (arg1)->LastShape();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1generated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlongArray jresult = 0 ;
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopTools_ListOfShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (TopTools_ListOfShape *) &(arg1)->Generated((TopoDS_Shape const &)*arg2);
  {
    int j,n;
    const TopTools_ListOfShape& l = *result;
    n = l.Extent();
    jlong * as=(jlong*) malloc (sizeof(jlong) * n * 2);
    TopTools_ListIteratorOfListOfShape it(l);
    j=0;
    while(it.More())
    {
      const TopoDS_Shape & s=it.Value();
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(s.TShape());
      tsp->Location(s.Location());
      tsp->Orientation(s.Orientation());
      as[j++]=(jlong)tsp;
      as[j++]=s.ShapeType();
      it.Next();
    }
    jlongArray jarray=jenv->NewLongArray(n*2);
    jenv->SetLongArrayRegion(jarray, 0, n*2, as);
    free(as);
    jresult=jarray;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepOffsetAPI_1MakePipeShell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepOffsetAPI_MakePipeShell *arg1 = (BRepOffsetAPI_MakePipeShell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepOffsetAPI_MakePipeShell **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1ThruSections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Standard_Boolean arg1 ;
  Standard_Boolean arg2 ;
  Standard_Real arg3 ;
  BRepOffsetAPI_ThruSections *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = jarg1;
  }
  {
    arg2 = jarg2;
  }
  arg3 = (Standard_Real)jarg3; 
  result = (BRepOffsetAPI_ThruSections *)new BRepOffsetAPI_ThruSections(arg1,arg2,arg3);
  *(BRepOffsetAPI_ThruSections **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1ThruSections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  Standard_Boolean arg1 ;
  Standard_Boolean arg2 ;
  BRepOffsetAPI_ThruSections *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = jarg1;
  }
  {
    arg2 = jarg2;
  }
  result = (BRepOffsetAPI_ThruSections *)new BRepOffsetAPI_ThruSections(arg1,arg2);
  *(BRepOffsetAPI_ThruSections **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1ThruSections_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  Standard_Boolean arg1 ;
  BRepOffsetAPI_ThruSections *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = jarg1;
  }
  result = (BRepOffsetAPI_ThruSections *)new BRepOffsetAPI_ThruSections(arg1);
  *(BRepOffsetAPI_ThruSections **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepOffsetAPI_1ThruSections_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepOffsetAPI_ThruSections *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepOffsetAPI_ThruSections *)new BRepOffsetAPI_ThruSections();
  *(BRepOffsetAPI_ThruSections **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1ThruSections_1addWire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepOffsetAPI_ThruSections *arg1 = (BRepOffsetAPI_ThruSections *) 0 ;
  TopoDS_Wire *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepOffsetAPI_ThruSections **)&jarg1; 
  arg2 = *(TopoDS_Wire **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Wire const & reference is null");
    return ;
  } 
  (arg1)->AddWire((TopoDS_Wire const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1ThruSections_1setParType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BRepOffsetAPI_ThruSections *arg1 = (BRepOffsetAPI_ThruSections *) 0 ;
  Approx_ParametrizationType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepOffsetAPI_ThruSections **)&jarg1; 
  arg2 = (Approx_ParametrizationType)jarg2; 
  (arg1)->SetParType(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepOffsetAPI_1ThruSections(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepOffsetAPI_ThruSections *arg1 = (BRepOffsetAPI_ThruSections *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepOffsetAPI_ThruSections **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1Poly_1Triangulation(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  Standard_Integer arg1 ;
  Standard_Integer arg2 ;
  Standard_Boolean arg3 ;
  Poly_Triangulation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Standard_Integer)jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  {
    arg3 = jarg3;
  }
  result = (Poly_Triangulation *)new Poly_Triangulation(arg1,arg2,arg3);
  *(Poly_Triangulation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Poly_1Triangulation_1deflection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  result = (Standard_Real)((Poly_Triangulation const *)arg1)->Deflection();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Poly_1Triangulation_1deflection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  (arg1)->Deflection(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Poly_1Triangulation_1removeUVNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  (arg1)->RemoveUVNodes();
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Poly_1Triangulation_1nbNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  result = (Standard_Integer)((Poly_Triangulation const *)arg1)->NbNodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Poly_1Triangulation_1nbTriangles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  result = (Standard_Integer)((Poly_Triangulation const *)arg1)->NbTriangles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Poly_1Triangulation_1hasUVNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  result = ((Poly_Triangulation const *)arg1)->HasUVNodes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Poly_1Triangulation_1triangles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  Poly_Array1OfTriangle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  result = (Poly_Array1OfTriangle *) &((Poly_Triangulation const *)arg1)->Triangles();
  {
    int i,j,s;
    const Poly_Array1OfTriangle &Triangles  = *result;
    s=Triangles.Length()*3;
    jint * iarray=new jint[s];
    Standard_Integer n1,n2,n3;
    
    for(j=0,i=Triangles.Lower();i<=Triangles.Upper();j+=3,i++)
    {
      Triangles(i).Get(n1,n2,n3);
      iarray[j]=n1-1;
      iarray[j+1]=n2-1;
      iarray[j+2]=n3-1;
    }
    
    jintArray array=jenv->NewIntArray(s);
    jenv->SetIntArrayRegion(array, 0, s, iarray);
    delete[] iarray;
    jresult=array;
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Poly_1Triangulation_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  TColgp_Array1OfPnt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  result = (TColgp_Array1OfPnt *) &((Poly_Triangulation const *)arg1)->Nodes();
  {
    const TColgp_Array1OfPnt &Nodes = *result;
    int i,j,s;
    s=Nodes.Length()*3;
    jdouble * ns=(jdouble *)malloc(sizeof(jdouble)*s);
    for(j=0,i=Nodes.Lower();i<=Nodes.Upper();j+=3,i++)
    {
      ns[j]=Nodes(i).X();
      ns[j+1]=Nodes(i).Y();
      ns[j+2]=Nodes(i).Z();
    }
    jdoubleArray jarray=jenv->NewDoubleArray(s);
    jenv->SetDoubleArrayRegion(jarray, 0, s, ns);
    free(ns);
    jresult=jarray;
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Poly_1Triangulation_1uvNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  TColgp_Array1OfPnt2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  result = (TColgp_Array1OfPnt2d *) &((Poly_Triangulation const *)arg1)->UVNodes();
  {
    const TColgp_Array1OfPnt2d &Nodes2d = *result;
    int i,j,s;
    s=Nodes2d.Length()*2;
    jdouble * ns=(jdouble *)malloc(sizeof(jdouble)*s);
    for(j=0,i=Nodes2d.Lower();i<=Nodes2d.Upper();j+=2,i++)
    {
      ns[j]=Nodes2d(i).X();
      ns[j+1]=Nodes2d(i).Y();
    }
    jdoubleArray jarray=jenv->NewDoubleArray(s);
    jenv->SetDoubleArrayRegion(jarray, 0, s, ns);
    free(ns);
    jresult=jarray;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Poly_1Triangulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Poly_Triangulation *arg1 = (Poly_Triangulation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Poly_Triangulation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Geom_1Geometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_Geom_Geometry *arg1 = (Handle_Geom_Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_Geom_Geometry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Curve_1firstParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Curve **)&jarg1; 
  result = (Standard_Real)Handle_Geom_Curve_firstParameter(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Curve_1lastParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Curve **)&jarg1; 
  result = (Standard_Real)Handle_Geom_Curve_lastParameter(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Curve_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Curve **)&jarg1; 
  result = Handle_Geom_Curve_isClosed(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Curve_1isPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Curve **)&jarg1; 
  result = Handle_Geom_Curve_isPeriodic(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Curve_1period(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Curve **)&jarg1; 
  result = (Standard_Real)Handle_Geom_Curve_period(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Geom_1Curve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_Geom_Curve *arg1 = (Handle_Geom_Curve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_Geom_Curve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Surface_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdoubleArray jresult = 0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Surface **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  result = Handle_Geom_Surface_value((Handle_Geom_Surface const *)arg1,arg2,arg3);
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Surface_1bounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Surface **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  Handle_Geom_Surface_bounds__SWIG_0((Handle_Geom_Surface const *)arg1,arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Surface_1bounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real *arg2 = 0 ;
  Standard_Real *arg3 = 0 ;
  Standard_Real *arg4 = 0 ;
  Standard_Real *arg5 = 0 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Surface **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, (double **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, (double **)&arg5, jarg5)) return ; 
  Handle_Geom_Surface_bounds__SWIG_1((Handle_Geom_Surface const *)arg1,*arg2,*arg3,*arg4,*arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, (double *)arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, (double *)arg5, jarg5); 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Surface_1isUClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Surface **)&jarg1; 
  result = Handle_Geom_Surface_isUClosed((Handle_Geom_Surface const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Surface_1isVClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Surface **)&jarg1; 
  result = Handle_Geom_Surface_isVClosed((Handle_Geom_Surface const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Surface_1uIso(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  SwigValueWrapper< Handle_Geom_Curve > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Surface **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  result = Handle_Geom_Surface_uIso((Handle_Geom_Surface const *)arg1,arg2);
  *(Handle_Geom_Curve **)&jresult = new Handle_Geom_Curve((const Handle_Geom_Curve &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Surface_1vIso(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  Standard_Real arg2 ;
  SwigValueWrapper< Handle_Geom_Curve > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Surface **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  result = Handle_Geom_Surface_vIso((Handle_Geom_Surface const *)arg1,arg2);
  *(Handle_Geom_Curve **)&jresult = new Handle_Geom_Curve((const Handle_Geom_Curve &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Geom_1Surface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_Geom_Surface *arg1 = (Handle_Geom_Surface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_Geom_Surface **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Geom2d_1Geometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_Geom2d_Geometry *arg1 = (Handle_Geom2d_Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_Geom2d_Geometry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Geom2d_1Curve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_Geom2d_Curve *arg1 = (Handle_Geom2d_Curve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_Geom2d_Curve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Geom_1BoundedCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_Geom_BoundedCurve *arg1 = (Handle_Geom_BoundedCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_Geom_BoundedCurve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1Geom_1BSplineCurve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4, jint jarg5, jboolean jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfInteger *arg4 = 0 ;
  Standard_Integer arg5 ;
  Standard_Boolean arg6 ;
  Standard_Boolean arg7 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    arg2 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg2->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  {
    int i,j;
    if (!jarg3)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg3);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg3, NULL);
    
    arg3 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg3->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  arg4 = *(TColStd_Array1OfInteger **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TColStd_Array1OfInteger const & reference is null");
    return 0;
  } 
  arg5 = (Standard_Integer)jarg5; 
  {
    arg6 = jarg6;
  }
  {
    arg7 = jarg7;
  }
  result = (Handle_Geom_BSplineCurve *)new_Handle_Geom_BSplineCurve__SWIG_0((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfInteger const &)*arg4,arg5,arg6,arg7);
  *(Handle_Geom_BSplineCurve **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1Geom_1BSplineCurve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4, jint jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfInteger *arg4 = 0 ;
  Standard_Integer arg5 ;
  Standard_Boolean arg6 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    arg2 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg2->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  {
    int i,j;
    if (!jarg3)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg3);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg3, NULL);
    
    arg3 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg3->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  arg4 = *(TColStd_Array1OfInteger **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TColStd_Array1OfInteger const & reference is null");
    return 0;
  } 
  arg5 = (Standard_Integer)jarg5; 
  {
    arg6 = jarg6;
  }
  result = (Handle_Geom_BSplineCurve *)new_Handle_Geom_BSplineCurve__SWIG_0((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfInteger const &)*arg4,arg5,arg6);
  *(Handle_Geom_BSplineCurve **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1Geom_1BSplineCurve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  TColStd_Array1OfReal *arg3 = 0 ;
  TColStd_Array1OfInteger *arg4 = 0 ;
  Standard_Integer arg5 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    arg2 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg2->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  {
    int i,j;
    if (!jarg3)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg3);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg3, NULL);
    
    arg3 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg3->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  arg4 = *(TColStd_Array1OfInteger **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TColStd_Array1OfInteger const & reference is null");
    return 0;
  } 
  arg5 = (Standard_Integer)jarg5; 
  result = (Handle_Geom_BSplineCurve *)new_Handle_Geom_BSplineCurve__SWIG_0((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,(TColStd_Array1OfReal const &)*arg3,(TColStd_Array1OfInteger const &)*arg4,arg5);
  *(Handle_Geom_BSplineCurve **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1setKnot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  Handle_Geom_BSplineCurve_setKnot__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1setKnot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real arg3 ;
  Standard_Integer arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Integer)jarg4; 
  Handle_Geom_BSplineCurve_setKnot__SWIG_1(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1setPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  Handle_Geom_BSplineCurve_setPeriodic(arg1);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1setNotPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  Handle_Geom_BSplineCurve_setNotPeriodic(arg1);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1setOrigin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  Handle_Geom_BSplineCurve_setOrigin__SWIG_0(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1setOrigin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  Handle_Geom_BSplineCurve_setOrigin__SWIG_1(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1setPole_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  {
    if(jenv->GetArrayLength(jarg3)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg3, NULL);
    arg3=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  Handle_Geom_BSplineCurve_setPole__SWIG_0(arg1,arg2,(gp_Pnt const &)*arg3);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1setPole_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jdouble jarg4) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt *arg3 = 0 ;
  Standard_Real arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  {
    if(jenv->GetArrayLength(jarg3)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg3, NULL);
    arg3=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  arg4 = (Standard_Real)jarg4; 
  Handle_Geom_BSplineCurve_setPole__SWIG_1(arg1,arg2,(gp_Pnt const &)*arg3,arg4);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1movePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  Standard_Integer arg4 ;
  Standard_Integer arg5 ;
  Standard_Integer *arg6 = 0 ;
  Standard_Integer *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  {
    if(jenv->GetArrayLength(jarg3)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg3, NULL);
    arg3=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  arg4 = (Standard_Integer)jarg4; 
  arg5 = (Standard_Integer)jarg5; 
  arg6 = *(Standard_Integer **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Standard_Integer & reference is null");
    return ;
  } 
  arg7 = *(Standard_Integer **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Standard_Integer & reference is null");
    return ;
  } 
  Handle_Geom_BSplineCurve_movePoint(arg1,arg2,(gp_Pnt const &)*arg3,arg4,arg5,*arg6,*arg7);
  {
    delete arg3;
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1movePointAndTangent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdouble jarg5, jint jarg6, jint jarg7) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt *arg3 = 0 ;
  gp_Vec *arg4 = 0 ;
  Standard_Real arg5 ;
  Standard_Integer arg6 ;
  Standard_Integer arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  {
    if(jenv->GetArrayLength(jarg3)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg3, NULL);
    arg3=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  {
    if(jenv->GetArrayLength(jarg4)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg4, NULL);
    arg4=new gp_Vec(naxe[0],naxe[1],naxe[2]);
  }
  arg5 = (Standard_Real)jarg5; 
  arg6 = (Standard_Integer)jarg6; 
  arg7 = (Standard_Integer)jarg7; 
  Handle_Geom_BSplineCurve_movePointAndTangent(arg1,arg2,(gp_Pnt const &)*arg3,(gp_Vec const &)*arg4,arg5,arg6,arg7);
  {
    delete arg3;
  }
  {
    delete arg4;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  result = Handle_Geom_BSplineCurve_isClosed((Handle_Geom_BSplineCurve const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1isPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  result = Handle_Geom_BSplineCurve_isPeriodic((Handle_Geom_BSplineCurve const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1isRational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  result = Handle_Geom_BSplineCurve_isRational((Handle_Geom_BSplineCurve const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1continuity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  GeomAbs_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  result = (GeomAbs_Shape)Handle_Geom_BSplineCurve_continuity((Handle_Geom_BSplineCurve const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1Degree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  result = (Standard_Integer)Handle_Geom_BSplineCurve_Degree((Handle_Geom_BSplineCurve const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1localValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jint jarg4) {
  jdoubleArray jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Real arg2 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Integer)jarg3; 
  arg4 = (Standard_Integer)jarg4; 
  result = Handle_Geom_BSplineCurve_localValue((Handle_Geom_BSplineCurve const *)arg1,arg2,arg3,arg4);
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1endPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  result = Handle_Geom_BSplineCurve_endPoint((Handle_Geom_BSplineCurve const *)arg1);
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1startPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  result = Handle_Geom_BSplineCurve_startPoint((Handle_Geom_BSplineCurve const *)arg1);
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1nbKnots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  result = (Standard_Integer)Handle_Geom_BSplineCurve_nbKnots((Handle_Geom_BSplineCurve const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1nbPoles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  result = (Standard_Integer)Handle_Geom_BSplineCurve_nbPoles((Handle_Geom_BSplineCurve const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1pole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdoubleArray jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  result = Handle_Geom_BSplineCurve_pole((Handle_Geom_BSplineCurve const *)arg1,arg2);
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  result = (Standard_Real)Handle_Geom_BSplineCurve_weight((Handle_Geom_BSplineCurve const *)arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Geom_1BSplineCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_Geom_BSplineCurve *arg1 = (Handle_Geom_BSplineCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_Geom_BSplineCurve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Geom_1TrimmedCurve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Handle_Geom_TrimmedCurve *arg1 = (Handle_Geom_TrimmedCurve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_Geom_TrimmedCurve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomFill_1Pipe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  GeomFill_Pipe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Curve const & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  result = (GeomFill_Pipe *)new GeomFill_Pipe((Handle_Geom_Curve const &)*arg1,arg2);
  *(GeomFill_Pipe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomFill_1Pipe_1perform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  Standard_Boolean arg2 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  {
    arg2 = jarg2;
  }
  {
    arg3 = jarg3;
  }
  (arg1)->Perform(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomFill_1Pipe_1perform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  {
    arg2 = jarg2;
  }
  (arg1)->Perform(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomFill_1Pipe_1perform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  (arg1)->Perform();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomFill_1Pipe_1perform_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3, jint jarg4, jint jarg5, jint jarg6) {
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  GeomAbs_Shape arg4 ;
  Standard_Integer arg5 ;
  Standard_Integer arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  {
    arg3 = jarg3;
  }
  arg4 = (GeomAbs_Shape)jarg4; 
  arg5 = (Standard_Integer)jarg5; 
  arg6 = (Standard_Integer)jarg6; 
  (arg1)->Perform(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomFill_1Pipe_1perform_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  GeomAbs_Shape arg4 ;
  Standard_Integer arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  {
    arg3 = jarg3;
  }
  arg4 = (GeomAbs_Shape)jarg4; 
  arg5 = (Standard_Integer)jarg5; 
  (arg1)->Perform(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomFill_1Pipe_1perform_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3, jint jarg4) {
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  GeomAbs_Shape arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  {
    arg3 = jarg3;
  }
  arg4 = (GeomAbs_Shape)jarg4; 
  (arg1)->Perform(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomFill_1Pipe_1perform_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  {
    arg3 = jarg3;
  }
  (arg1)->Perform(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomFill_1Pipe_1surface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  Handle_Geom_Surface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  result = (Handle_Geom_Surface *) &((GeomFill_Pipe const *)arg1)->Surface();
  *(Handle_Geom_Surface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomFill_1Pipe_1errorOnSurf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  result = (Standard_Real)((GeomFill_Pipe const *)arg1)->ErrorOnSurf();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GeomFill_1Pipe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GeomFill_Pipe *arg1 = (GeomFill_Pipe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GeomFill_Pipe **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepLib_1encodeRegularity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  TopoDS_Shape *arg1 = 0 ;
  Standard_Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg2 = (Standard_Real)jarg2; 
  BRepLib::EncodeRegularity((TopoDS_Shape const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepLib_1encodeRegularity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopoDS_Shape *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  BRepLib::EncodeRegularity((TopoDS_Shape const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepLib(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepLib *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepLib *)new BRepLib();
  *(BRepLib **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepLib(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepLib *arg1 = (BRepLib *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepLib **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepFilletAPI_1LocalOperation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepFilletAPI_LocalOperation *arg1 = (BRepFilletAPI_LocalOperation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepFilletAPI_LocalOperation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepFilletAPI_1MakeFillet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  ChFi3d_FilletShape arg2 ;
  BRepFilletAPI_MakeFillet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = (ChFi3d_FilletShape)jarg2; 
  result = (BRepFilletAPI_MakeFillet *)new BRepFilletAPI_MakeFillet((TopoDS_Shape const &)*arg1,arg2);
  *(BRepFilletAPI_MakeFillet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepFilletAPI_1MakeFillet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepFilletAPI_MakeFillet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepFilletAPI_MakeFillet *)new BRepFilletAPI_MakeFillet((TopoDS_Shape const &)*arg1);
  *(BRepFilletAPI_MakeFillet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFilletAPI_1MakeFillet_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  BRepFilletAPI_MakeFillet *arg1 = (BRepFilletAPI_MakeFillet *) 0 ;
  Standard_Real arg2 ;
  TopoDS_Edge *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(BRepFilletAPI_MakeFillet **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = *(TopoDS_Edge **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  {
    try	{
      OCC_CATCH_SIGNALS
      (arg1)->Add(arg2,(TopoDS_Edge const &)*arg3);
    }
    catch(Standard_Failure) {
      cout << "add EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepFilletAPI_1MakeFillet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepFilletAPI_MakeFillet *arg1 = (BRepFilletAPI_MakeFillet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepFilletAPI_MakeFillet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepFilletAPI_1MakeChamfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepFilletAPI_MakeChamfer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepFilletAPI_MakeChamfer *)new BRepFilletAPI_MakeChamfer((TopoDS_Shape const &)*arg1);
  *(BRepFilletAPI_MakeChamfer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFilletAPI_1MakeChamfer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  BRepFilletAPI_MakeChamfer *arg1 = (BRepFilletAPI_MakeChamfer *) 0 ;
  Standard_Real arg2 ;
  TopoDS_Edge *arg3 = 0 ;
  TopoDS_Face *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(BRepFilletAPI_MakeChamfer **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  arg3 = *(TopoDS_Edge **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  arg4 = *(TopoDS_Face **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return ;
  } 
  {
    try	{
      OCC_CATCH_SIGNALS
      (arg1)->Add(arg2,(TopoDS_Edge const &)*arg3,(TopoDS_Face const &)*arg4);
    }
    catch(Standard_Failure) {
      cout << "add EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepFilletAPI_1MakeChamfer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepFilletAPI_MakeChamfer *arg1 = (BRepFilletAPI_MakeChamfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepFilletAPI_MakeChamfer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepCheck_1Analyzer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  BRepCheck_Analyzer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    arg2 = jarg2;
  }
  result = (BRepCheck_Analyzer *)new BRepCheck_Analyzer((TopoDS_Shape const &)*arg1,arg2);
  *(BRepCheck_Analyzer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepCheck_1Analyzer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  BRepCheck_Analyzer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepCheck_Analyzer *)new BRepCheck_Analyzer((TopoDS_Shape const &)*arg1);
  *(BRepCheck_Analyzer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepCheck_1Analyzer_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  BRepCheck_Analyzer *arg1 = (BRepCheck_Analyzer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepCheck_Analyzer **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  (arg1)->Init((TopoDS_Shape const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepCheck_1Analyzer_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepCheck_Analyzer *arg1 = (BRepCheck_Analyzer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepCheck_Analyzer **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Init((TopoDS_Shape const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepCheck_1Analyzer_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepCheck_Analyzer *arg1 = (BRepCheck_Analyzer *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepCheck_Analyzer **)&jarg1; 
  result = ((BRepCheck_Analyzer const *)arg1)->IsValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepCheck_1Analyzer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepCheck_Analyzer *arg1 = (BRepCheck_Analyzer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepCheck_Analyzer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1ShapeBuild_1ReShape(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ShapeBuild_ReShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ShapeBuild_ReShape *)new ShapeBuild_ReShape();
  *(ShapeBuild_ReShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeBuild_1ReShape_1replace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  Standard_Boolean arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ShapeBuild_ReShape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  {
    arg4 = jarg4;
  }
  (arg1)->Replace((TopoDS_Shape const &)*arg2,(TopoDS_Shape const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeBuild_1ReShape_1replace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ShapeBuild_ReShape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  (arg1)->Replace((TopoDS_Shape const &)*arg2,(TopoDS_Shape const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeBuild_1ReShape_1apply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopAbs_ShapeEnum arg3 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ShapeBuild_ReShape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg3 = (TopAbs_ShapeEnum)jarg3; 
  result = (arg1)->Apply((TopoDS_Shape const &)*arg2,arg3);
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeBuild_1ReShape_1apply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ShapeBuild_ReShape **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (arg1)->Apply((TopoDS_Shape const &)*arg2);
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1ShapeBuild_1ReShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShapeBuild_ReShape *arg1 = (ShapeBuild_ReShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShapeBuild_ReShape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_XSControl_1Reader_1readFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  Standard_CString arg2 ;
  IFSelect_ReturnStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XSControl_Reader **)&jarg1; 
  {
    arg2 = const_cast<Standard_CString>(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (IFSelect_ReturnStatus)(arg1)->ReadFile(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_XSControl_1Reader_1transferRoots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XSControl_Reader **)&jarg1; 
  result = (Standard_Integer)(arg1)->TransferRoots();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_XSControl_1Reader_1clearShapes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XSControl_Reader **)&jarg1; 
  (arg1)->ClearShapes();
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_XSControl_1Reader_1nbRootsForTransfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XSControl_Reader **)&jarg1; 
  result = (Standard_Integer)(arg1)->NbRootsForTransfer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_XSControl_1Reader_1oneShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XSControl_Reader **)&jarg1; 
  result = ((XSControl_Reader const *)arg1)->OneShape();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_XSControl_1Reader_1readFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jint jresult = 0 ;
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  jbyte *arg2 ;
  IFSelect_ReturnStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XSControl_Reader **)&jarg1; 
  {
    int length = jenv->GetArrayLength(jarg2);
    jbyte * name = new jbyte[length+1];
    jenv->GetByteArrayRegion(jarg2, 0, length, name); 
    name[length] = '\0';
    arg2 = name;
  }
  result = (IFSelect_ReturnStatus)XSControl_Reader_readFile__SWIG_1(arg1,arg2);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1XSControl_1Reader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XSControl_Reader *arg1 = (XSControl_Reader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XSControl_Reader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1STEPControl_1Reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  STEPControl_Reader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (STEPControl_Reader *)new STEPControl_Reader();
  *(STEPControl_Reader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_STEPControl_1Reader_1getLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  STEPControl_Reader *arg1 = (STEPControl_Reader *) 0 ;
  TopoDS_Shape *arg2 = (TopoDS_Shape *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(STEPControl_Reader **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2; 
  result = (char *)STEPControl_Reader_getLabel(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1STEPControl_1Reader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  STEPControl_Reader *arg1 = (STEPControl_Reader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(STEPControl_Reader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1IGESControl_1Reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IGESControl_Reader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IGESControl_Reader *)new IGESControl_Reader();
  *(IGESControl_Reader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_IGESControl_1Reader_1getLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  IGESControl_Reader *arg1 = (IGESControl_Reader *) 0 ;
  TopoDS_Shape arg2 ;
  TopoDS_Shape *argp2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IGESControl_Reader **)&jarg1; 
  argp2 = *(TopoDS_Shape **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TopoDS_Shape");
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)IGESControl_Reader_getLabel(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_IGESControl_1Reader_1getShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  IGESControl_Reader *arg1 = (IGESControl_Reader *) 0 ;
  char *arg2 = (char *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IGESControl_Reader **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = IGESControl_Reader_getShape(arg1,arg2);
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_IGESControl_1Reader_1dumpLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IGESControl_Reader *arg1 = (IGESControl_Reader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IGESControl_Reader **)&jarg1; 
  IGESControl_Reader_dumpLabels(arg1);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1IGESControl_1Reader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IGESControl_Reader *arg1 = (IGESControl_Reader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IGESControl_Reader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1STEPControl_1Writer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  STEPControl_Writer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (STEPControl_Writer *)new STEPControl_Writer();
  *(STEPControl_Writer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_STEPControl_1Writer_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  STEPControl_Writer *arg1 = (STEPControl_Writer *) 0 ;
  Standard_CString arg2 ;
  IFSelect_ReturnStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(STEPControl_Writer **)&jarg1; 
  {
    arg2 = const_cast<Standard_CString>(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (IFSelect_ReturnStatus)(arg1)->Write(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_STEPControl_1Writer_1transfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  STEPControl_Writer *arg1 = (STEPControl_Writer *) 0 ;
  TopoDS_Shape arg2 ;
  STEPControl_StepModelType arg3 ;
  TopoDS_Shape *argp2 ;
  IFSelect_ReturnStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(STEPControl_Writer **)&jarg1; 
  argp2 = *(TopoDS_Shape **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TopoDS_Shape");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (STEPControl_StepModelType)jarg3; 
  result = (IFSelect_ReturnStatus)(arg1)->Transfer(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_STEPControl_1Writer_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  STEPControl_Writer *arg1 = (STEPControl_Writer *) 0 ;
  Standard_Boolean arg2 ;
  Handle_StepData_StepModel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(STEPControl_Writer **)&jarg1; 
  {
    arg2 = jarg2;
  }
  result = (arg1)->Model(arg2);
  *(Handle_StepData_StepModel **)&jresult = new Handle_StepData_StepModel((const Handle_StepData_StepModel &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1STEPControl_1Writer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  STEPControl_Writer *arg1 = (STEPControl_Writer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(STEPControl_Writer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1IGESControl_1Writer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IGESControl_Writer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IGESControl_Writer *)new IGESControl_Writer();
  *(IGESControl_Writer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1IGESControl_1Writer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  Standard_CString arg1 ;
  Standard_Integer arg2 ;
  IGESControl_Writer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = const_cast<Standard_CString>(jenv->GetStringUTFChars(jarg1, 0));
  }
  arg2 = (Standard_Integer)jarg2; 
  result = (IGESControl_Writer *)new IGESControl_Writer(arg1,arg2);
  *(IGESControl_Writer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1IGESControl_1Writer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  Standard_CString arg1 ;
  IGESControl_Writer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = const_cast<Standard_CString>(jenv->GetStringUTFChars(jarg1, 0));
  }
  result = (IGESControl_Writer *)new IGESControl_Writer(arg1);
  *(IGESControl_Writer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_IGESControl_1Writer_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  IGESControl_Writer *arg1 = (IGESControl_Writer *) 0 ;
  Standard_CString arg2 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IGESControl_Writer **)&jarg1; 
  {
    arg2 = const_cast<Standard_CString>(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (arg1)->Write(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_IGESControl_1Writer_1addShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  IGESControl_Writer *arg1 = (IGESControl_Writer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IGESControl_Writer **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (arg1)->AddShape((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_IGESControl_1Writer_1computeModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IGESControl_Writer *arg1 = (IGESControl_Writer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IGESControl_Writer **)&jarg1; 
  (arg1)->ComputeModel();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1IGESControl_1Writer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IGESControl_Writer *arg1 = (IGESControl_Writer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IGESControl_Writer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1IGESControl_1Controller(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IGESControl_Controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IGESControl_Controller *)new IGESControl_Controller();
  *(IGESControl_Controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_IGESControl_1Controller_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IGESControl_Controller *arg1 = (IGESControl_Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IGESControl_Controller **)&jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1IGESControl_1Controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IGESControl_Controller *arg1 = (IGESControl_Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IGESControl_Controller **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Root_1setPrecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  Standard_Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Root **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  (arg1)->SetPrecision(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Root_1getPrecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Root **)&jarg1; 
  result = (Standard_Real)((ShapeFix_Root const *)arg1)->Precision();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Root_1setContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  ShapeBuild_ReShape *arg2 = (ShapeBuild_ReShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ShapeFix_Root **)&jarg1; 
  arg2 = *(ShapeBuild_ReShape **)&jarg2; 
  (arg1)->SetContext((ShapeBuild_ReShape const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Root_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  ShapeBuild_ReShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Root **)&jarg1; 
  result = (ShapeBuild_ReShape *)ShapeFix_Root_getContext(arg1);
  *(ShapeBuild_ReShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1ShapeFix_1Root(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShapeFix_Root *arg1 = (ShapeFix_Root *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShapeFix_Root **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1ShapeFix_1Wireframe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  ShapeFix_Wireframe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (ShapeFix_Wireframe *)new ShapeFix_Wireframe((TopoDS_Shape const &)*arg1);
  *(ShapeFix_Wireframe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Wireframe_1fixWireGaps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Wireframe **)&jarg1; 
  result = (arg1)->FixWireGaps();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Wireframe_1fixSmallEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Wireframe **)&jarg1; 
  result = (arg1)->FixSmallEdges();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Wireframe_1setLimitAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  Standard_Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Wireframe **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  (arg1)->SetLimitAngle(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Wireframe_1getLimitAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Wireframe **)&jarg1; 
  result = (Standard_Real)((ShapeFix_Wireframe const *)arg1)->LimitAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Wireframe_1shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Wireframe **)&jarg1; 
  result = (arg1)->Shape();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Wireframe_1setDropSmallEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Wireframe **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ShapeFix_Wireframe_setDropSmallEdges(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Wireframe_1getDropSmallEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeFix_Wireframe **)&jarg1; 
  result = (bool)ShapeFix_Wireframe_getDropSmallEdges(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1ShapeFix_1Wireframe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShapeFix_Wireframe *arg1 = (ShapeFix_Wireframe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShapeFix_Wireframe **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1APIHeaderSection_1MakeHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Handle_StepData_StepModel *arg1 = 0 ;
  APIHeaderSection_MakeHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Handle_StepData_StepModel **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_StepData_StepModel const & reference is null");
    return 0;
  } 
  result = (APIHeaderSection_MakeHeader *)new APIHeaderSection_MakeHeader((Handle_StepData_StepModel const &)*arg1);
  *(APIHeaderSection_MakeHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_APIHeaderSection_1MakeHeader_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Handle_TCollection_HAsciiString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(APIHeaderSection_MakeHeader **)&jarg1; 
  arg2 = *(Handle_TCollection_HAsciiString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_TCollection_HAsciiString const & reference is null");
    return ;
  } 
  (arg1)->SetName((Handle_TCollection_HAsciiString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_APIHeaderSection_1MakeHeader_1setAuthorValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Standard_Integer arg2 ;
  Handle_TCollection_HAsciiString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(APIHeaderSection_MakeHeader **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  arg3 = *(Handle_TCollection_HAsciiString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_TCollection_HAsciiString const & reference is null");
    return ;
  } 
  (arg1)->SetAuthorValue(arg2,(Handle_TCollection_HAsciiString const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_APIHeaderSection_1MakeHeader_1setOrganizationValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Standard_Integer arg2 ;
  Handle_TCollection_HAsciiString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(APIHeaderSection_MakeHeader **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  arg3 = *(Handle_TCollection_HAsciiString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_TCollection_HAsciiString const & reference is null");
    return ;
  } 
  (arg1)->SetOrganizationValue(arg2,(Handle_TCollection_HAsciiString const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_APIHeaderSection_1MakeHeader_1setOriginatingSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Handle_TCollection_HAsciiString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(APIHeaderSection_MakeHeader **)&jarg1; 
  arg2 = *(Handle_TCollection_HAsciiString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_TCollection_HAsciiString const & reference is null");
    return ;
  } 
  (arg1)->SetOriginatingSystem((Handle_TCollection_HAsciiString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_APIHeaderSection_1MakeHeader_1setDescriptionValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  Standard_Integer arg2 ;
  Handle_TCollection_HAsciiString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(APIHeaderSection_MakeHeader **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  arg3 = *(Handle_TCollection_HAsciiString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_TCollection_HAsciiString const & reference is null");
    return ;
  } 
  (arg1)->SetDescriptionValue(arg2,(Handle_TCollection_HAsciiString const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1APIHeaderSection_1MakeHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  APIHeaderSection_MakeHeader *arg1 = (APIHeaderSection_MakeHeader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(APIHeaderSection_MakeHeader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1ShapeUpgrade_1Tool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShapeUpgrade_Tool *arg1 = (ShapeUpgrade_Tool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShapeUpgrade_Tool **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1ShapeUpgrade_1RemoveInternalWires(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  ShapeUpgrade_RemoveInternalWires *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (ShapeUpgrade_RemoveInternalWires *)new ShapeUpgrade_RemoveInternalWires((TopoDS_Shape const &)*arg1);
  *(ShapeUpgrade_RemoveInternalWires **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1RemoveInternalWires_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_RemoveInternalWires **)&jarg1; 
  result = (arg1)->Perform();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1RemoveInternalWires_1getResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_RemoveInternalWires **)&jarg1; 
  result = ((ShapeUpgrade_RemoveInternalWires const *)arg1)->GetResult();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1RemoveInternalWires_1setMinArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_RemoveInternalWires **)&jarg1; 
  arg2 = (double)jarg2; 
  ShapeUpgrade_RemoveInternalWires_setMinArea(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1RemoveInternalWires_1getMinArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_RemoveInternalWires **)&jarg1; 
  result = (double)ShapeUpgrade_RemoveInternalWires_getMinArea(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1RemoveInternalWires_1setRemoveFaceMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  Standard_Boolean arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_RemoveInternalWires **)&jarg1; 
  {
    arg2 = jarg2;
  }
  ShapeUpgrade_RemoveInternalWires_setRemoveFaceMode(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1RemoveInternalWires_1getRemoveFaceMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_RemoveInternalWires **)&jarg1; 
  result = ShapeUpgrade_RemoveInternalWires_getRemoveFaceMode(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1ShapeUpgrade_1RemoveInternalWires(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShapeUpgrade_RemoveInternalWires *arg1 = (ShapeUpgrade_RemoveInternalWires *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShapeUpgrade_RemoveInternalWires **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1ShapeDivide_1getResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShapeUpgrade_ShapeDivide *arg1 = (ShapeUpgrade_ShapeDivide *) 0 ;
  TopoDS_Shape result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_ShapeDivide **)&jarg1; 
  result = ((ShapeUpgrade_ShapeDivide const *)arg1)->Result();
  {
    if((&result)->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape((&result)->TShape());
      tsp->Location((&result)->Location());
      tsp->Orientation((&result)->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1ShapeDivide_1perform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ShapeUpgrade_ShapeDivide *arg1 = (ShapeUpgrade_ShapeDivide *) 0 ;
  Standard_Boolean arg2 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_ShapeDivide **)&jarg1; 
  {
    arg2 = jarg2;
  }
  result = (arg1)->Perform(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1ShapeDivide_1perform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ShapeUpgrade_ShapeDivide *arg1 = (ShapeUpgrade_ShapeDivide *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_ShapeDivide **)&jarg1; 
  result = (arg1)->Perform();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1ShapeUpgrade_1ShapeDivide(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ShapeUpgrade_ShapeDivide *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ShapeUpgrade_ShapeDivide *)new ShapeUpgrade_ShapeDivide();
  *(ShapeUpgrade_ShapeDivide **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1ShapeUpgrade_1ShapeDivide(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShapeUpgrade_ShapeDivide *arg1 = (ShapeUpgrade_ShapeDivide *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShapeUpgrade_ShapeDivide **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1ShapeUpgrade_1ShapeDivideArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  ShapeUpgrade_ShapeDivideArea *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (ShapeUpgrade_ShapeDivideArea *)new ShapeUpgrade_ShapeDivideArea((TopoDS_Shape const &)*arg1);
  *(ShapeUpgrade_ShapeDivideArea **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1ShapeDivideArea_1setMaxArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShapeUpgrade_ShapeDivideArea *arg1 = (ShapeUpgrade_ShapeDivideArea *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_ShapeDivideArea **)&jarg1; 
  arg2 = (double)jarg2; 
  ShapeUpgrade_ShapeDivideArea_setMaxArea(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1ShapeDivideArea_1getMaxArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShapeUpgrade_ShapeDivideArea *arg1 = (ShapeUpgrade_ShapeDivideArea *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeUpgrade_ShapeDivideArea **)&jarg1; 
  result = (double)ShapeUpgrade_ShapeDivideArea_getMaxArea(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1ShapeUpgrade_1ShapeDivideArea(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShapeUpgrade_ShapeDivideArea *arg1 = (ShapeUpgrade_ShapeDivideArea *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShapeUpgrade_ShapeDivideArea **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline();
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jint jarg2, jint jarg3, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  GeomAbs_Shape arg4 ;
  Standard_Real arg5 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  arg2 = (Standard_Integer)jarg2; 
  arg3 = (Standard_Integer)jarg3; 
  arg4 = (GeomAbs_Shape)jarg4; 
  arg5 = (Standard_Real)jarg5; 
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,arg2,arg3,arg4,arg5);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  GeomAbs_Shape arg4 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  arg2 = (Standard_Integer)jarg2; 
  arg3 = (Standard_Integer)jarg3; 
  arg4 = (GeomAbs_Shape)jarg4; 
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,arg2,arg3,arg4);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  Standard_Integer arg2 ;
  Standard_Integer arg3 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  arg2 = (Standard_Integer)jarg2; 
  arg3 = (Standard_Integer)jarg3; 
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,arg2,arg3);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  Standard_Integer arg2 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  arg2 = (Standard_Integer)jarg2; 
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,arg2);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jint jarg3, jint jarg4, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  GeomAbs_Shape arg5 ;
  Standard_Real arg6 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    arg2 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg2->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  arg3 = (Standard_Integer)jarg3; 
  arg4 = (Standard_Integer)jarg4; 
  arg5 = (GeomAbs_Shape)jarg5; 
  arg6 = (Standard_Real)jarg6; 
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,arg3,arg4,arg5,arg6);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  GeomAbs_Shape arg5 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    arg2 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg2->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  arg3 = (Standard_Integer)jarg3; 
  arg4 = (Standard_Integer)jarg4; 
  arg5 = (GeomAbs_Shape)jarg5; 
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,arg3,arg4,arg5);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Standard_Integer arg3 ;
  Standard_Integer arg4 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    arg2 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg2->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  arg3 = (Standard_Integer)jarg3; 
  arg4 = (Standard_Integer)jarg4; 
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,arg3,arg4);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jint jarg3) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  Standard_Integer arg3 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    arg2 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg2->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  arg3 = (Standard_Integer)jarg3; 
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2,arg3);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1PointsToBSpline_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  TColgp_Array1OfPnt *arg1 = 0 ;
  TColStd_Array1OfReal *arg2 = 0 ;
  GeomAPI_PointsToBSpline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    arg1 = new TColgp_Array1OfPnt(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg1->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
  }
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    arg2 = new TColStd_Array1OfReal(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      arg2->SetValue(i,Standard_Real(jarr[j]));
    }
    
  }
  result = (GeomAPI_PointsToBSpline *)new GeomAPI_PointsToBSpline((TColgp_Array1OfPnt const &)*arg1,(TColStd_Array1OfReal const &)*arg2);
  *(GeomAPI_PointsToBSpline **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1PointsToBSpline_1Curve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GeomAPI_PointsToBSpline *arg1 = (GeomAPI_PointsToBSpline *) 0 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_PointsToBSpline **)&jarg1; 
  result = (Handle_Geom_BSplineCurve *) &((GeomAPI_PointsToBSpline const *)arg1)->Curve();
  *(Handle_Geom_BSplineCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GeomAPI_1PointsToBSpline(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GeomAPI_PointsToBSpline *arg1 = (GeomAPI_PointsToBSpline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GeomAPI_PointsToBSpline **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1Interpolate(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jboolean jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Handle_TColgp_HArray1OfPnt *arg1 = 0 ;
  Standard_Boolean arg2 ;
  Standard_Real arg3 ;
  GeomAPI_Interpolate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    int i,j;
    if (!jarg1)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    jsize sz = jenv->GetArrayLength(jarg1);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg1, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return 0;
    }
    //Handle(TColgp_HArray1OfPnt) b = new TColgp_HArray1OfPnt(1,sz/3);
    //TODO: this is a leak!
    TColgp_HArray1OfPnt *a = new TColgp_HArray1OfPnt(1,sz/3);
    //Handle(TColgp_HArray1OfPnt) a = new TColgp_HArray1OfPnt(1,sz/3);
    
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      a->SetValue(i,gp_Pnt(jarr[j],jarr[j+1],jarr[j+2]));
    }
    
    Handle_TColgp_HArray1OfPnt *c = new Handle_TColgp_HArray1OfPnt(a);
    arg1 = *(Handle_TColgp_HArray1OfPnt **)&c;
    
    /*
    	
    	arg1 = *(TColgp_HArray1OfPnt **)&jarg1;
    	
    	TColgp_HArray1OfPnt arg1 = a;*/
    //Handle_TColgp_HArray1OfPnt arg1 = Handle(a);
    
  }
  {
    arg2 = jarg2;
  }
  arg3 = (Standard_Real)jarg3; 
  result = (GeomAPI_Interpolate *)new GeomAPI_Interpolate((Handle_TColgp_HArray1OfPnt const &)*arg1,arg2,arg3);
  *(GeomAPI_Interpolate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1Interpolate_1Load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jbooleanArray jarg3, jboolean jarg4) {
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  TColgp_Array1OfVec *arg2 = 0 ;
  Handle_TColStd_HArray1OfBoolean *arg3 = 0 ;
  Standard_Boolean arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_Interpolate **)&jarg1; 
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return ;
    }
    arg2 = new TColgp_Array1OfVec(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg2->SetValue(i,gp_Vec(gp_Dir(jarr[j],jarr[j+1],jarr[j+2])));
    }
    
  }
  {
    int i,j;
    if (!jarg3)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    jsize sz = jenv->GetArrayLength(jarg3);
    jboolean* jarr = jenv->GetBooleanArrayElements(jarg3, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return ;
    }
    TColStd_HArray1OfBoolean *a = new TColStd_HArray1OfBoolean(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      a->SetValue(i,Standard_Boolean(jarr[j]));
    }
    
    Handle_TColStd_HArray1OfBoolean *c = new Handle_TColStd_HArray1OfBoolean(a);
    arg3 = *(Handle_TColStd_HArray1OfBoolean **)&c;
    
  }
  {
    arg4 = jarg4;
  }
  (arg1)->Load((TColgp_Array1OfVec const &)*arg2,(Handle_TColStd_HArray1OfBoolean const &)*arg3,arg4);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1Interpolate_1Load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jbooleanArray jarg3) {
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  TColgp_Array1OfVec *arg2 = 0 ;
  Handle_TColStd_HArray1OfBoolean *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_Interpolate **)&jarg1; 
  {
    int i,j;
    if (!jarg2)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    jsize sz = jenv->GetArrayLength(jarg2);
    jdouble* jarr = jenv->GetDoubleArrayElements(jarg2, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return ;
    }
    arg2 = new TColgp_Array1OfVec(1,sz/3);
    for (i=1,j=0; i<=sz/3; i++,j=j+3) {
      arg2->SetValue(i,gp_Vec(gp_Dir(jarr[j],jarr[j+1],jarr[j+2])));
    }
    
  }
  {
    int i,j;
    if (!jarg3)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    jsize sz = jenv->GetArrayLength(jarg3);
    jboolean* jarr = jenv->GetBooleanArrayElements(jarg3, NULL);
    
    if (!jarr)
    {
      //sinn? - modulo test 3
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array (2)");
      return ;
    }
    TColStd_HArray1OfBoolean *a = new TColStd_HArray1OfBoolean(1,sz);
    for (i=1,j=0; i<=sz; i++,j++) {
      a->SetValue(i,Standard_Boolean(jarr[j]));
    }
    
    Handle_TColStd_HArray1OfBoolean *c = new Handle_TColStd_HArray1OfBoolean(a);
    arg3 = *(Handle_TColStd_HArray1OfBoolean **)&c;
    
  }
  (arg1)->Load((TColgp_Array1OfVec const &)*arg2,(Handle_TColStd_HArray1OfBoolean const &)*arg3);
  {
    delete arg2;
  }
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1Interpolate_1Perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_Interpolate **)&jarg1; 
  (arg1)->Perform();
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1Interpolate_1Curve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  Handle_Geom_BSplineCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_Interpolate **)&jarg1; 
  result = (Handle_Geom_BSplineCurve *) &((GeomAPI_Interpolate const *)arg1)->Curve();
  *(Handle_Geom_BSplineCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GeomAPI_1Interpolate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GeomAPI_Interpolate *arg1 = (GeomAPI_Interpolate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GeomAPI_Interpolate **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GC_1MakeArcOfCircle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  jlong jresult = 0 ;
  gp_Pnt *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  GC_MakeArcOfCircle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if(jenv->GetArrayLength(jarg1)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  {
    if(jenv->GetArrayLength(jarg3)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg3, NULL);
    arg3=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  result = (GC_MakeArcOfCircle *)new GC_MakeArcOfCircle((gp_Pnt const &)*arg1,(gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3);
  *(GC_MakeArcOfCircle **)&jresult = result; 
  {
    delete arg1;
  }
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GC_1MakeArcOfCircle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  gp_Circ *arg1 = 0 ;
  gp_Pnt *arg2 = 0 ;
  gp_Pnt *arg3 = 0 ;
  Standard_Boolean arg4 ;
  GC_MakeArcOfCircle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gp_Circ **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "gp_Circ const & reference is null");
    return 0;
  } 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  {
    if(jenv->GetArrayLength(jarg3)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg3, NULL);
    arg3=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  {
    arg4 = jarg4;
  }
  result = (GC_MakeArcOfCircle *)new GC_MakeArcOfCircle((gp_Circ const &)*arg1,(gp_Pnt const &)*arg2,(gp_Pnt const &)*arg3,arg4);
  *(GC_MakeArcOfCircle **)&jresult = result; 
  {
    delete arg2;
  }
  {
    delete arg3;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GC_1MakeArcOfCircle_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GC_MakeArcOfCircle *arg1 = (GC_MakeArcOfCircle *) 0 ;
  Handle_Geom_TrimmedCurve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GC_MakeArcOfCircle **)&jarg1; 
  result = (Handle_Geom_TrimmedCurve *) &((GC_MakeArcOfCircle const *)arg1)->Value();
  *(Handle_Geom_TrimmedCurve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GC_1MakeArcOfCircle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GC_MakeArcOfCircle *arg1 = (GC_MakeArcOfCircle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GC_MakeArcOfCircle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = BRepAlgo::IsValid((TopoDS_Shape const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1isTopologicallyValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = BRepAlgo::IsTopologicallyValid((TopoDS_Shape const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepAlgo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepAlgo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepAlgo *)new BRepAlgo();
  *(BRepAlgo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepAlgo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepAlgo *arg1 = (BRepAlgo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepAlgo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1BooleanOperation_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepAlgo_BooleanOperation *arg1 = (BRepAlgo_BooleanOperation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAlgo_BooleanOperation **)&jarg1; 
  (arg1)->Delete();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepAlgo_1BooleanOperation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepAlgo_BooleanOperation *arg1 = (BRepAlgo_BooleanOperation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepAlgo_BooleanOperation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1BooleanOperation_1performDS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepAlgo_BooleanOperation *arg1 = (BRepAlgo_BooleanOperation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAlgo_BooleanOperation **)&jarg1; 
  (arg1)->PerformDS();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1BooleanOperation_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  BRepAlgo_BooleanOperation *arg1 = (BRepAlgo_BooleanOperation *) 0 ;
  TopAbs_State arg2 ;
  TopAbs_State arg3 ;
  TopAbs_State const *argp2 ;
  TopAbs_State const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAlgo_BooleanOperation **)&jarg1; 
  argp2 = *(TopAbs_State **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TopAbs_State const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(TopAbs_State **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TopAbs_State const");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->Perform(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1BooleanOperation_1builder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepAlgo_BooleanOperation *arg1 = (BRepAlgo_BooleanOperation *) 0 ;
  Handle_TopOpeBRepBuild_HBuilder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAlgo_BooleanOperation **)&jarg1; 
  result = ((BRepAlgo_BooleanOperation const *)arg1)->Builder();
  *(Handle_TopOpeBRepBuild_HBuilder **)&jresult = new Handle_TopOpeBRepBuild_HBuilder((const Handle_TopOpeBRepBuild_HBuilder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1BooleanOperation_1shape1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepAlgo_BooleanOperation *arg1 = (BRepAlgo_BooleanOperation *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAlgo_BooleanOperation **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepAlgo_BooleanOperation const *)arg1)->Shape1();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1BooleanOperation_1Shape2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepAlgo_BooleanOperation *arg1 = (BRepAlgo_BooleanOperation *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAlgo_BooleanOperation **)&jarg1; 
  result = (TopoDS_Shape *) &((BRepAlgo_BooleanOperation const *)arg1)->Shape2();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1BooleanOperation_1modified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlongArray jresult = 0 ;
  BRepAlgo_BooleanOperation *arg1 = (BRepAlgo_BooleanOperation *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopTools_ListOfShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepAlgo_BooleanOperation **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (TopTools_ListOfShape *) &(arg1)->Modified((TopoDS_Shape const &)*arg2);
  {
    int j,n;
    const TopTools_ListOfShape& l = *result;
    n = l.Extent();
    jlong * as=(jlong*) malloc (sizeof(jlong) * n * 2);
    TopTools_ListIteratorOfListOfShape it(l);
    j=0;
    while(it.More())
    {
      const TopoDS_Shape & s=it.Value();
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(s.TShape());
      tsp->Location(s.Location());
      tsp->Orientation(s.Orientation());
      as[j++]=(jlong)tsp;
      as[j++]=s.ShapeType();
      it.Next();
    }
    jlongArray jarray=jenv->NewLongArray(n*2);
    jenv->SetLongArrayRegion(jarray, 0, n*2, as);
    free(as);
    jresult=jarray;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1BooleanOperation_1IsDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  BRepAlgo_BooleanOperation *arg1 = (BRepAlgo_BooleanOperation *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepAlgo_BooleanOperation **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (arg1)->IsDeleted((TopoDS_Shape const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepAlgo_1Cut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopoDS_Shape *arg2 = 0 ;
  BRepAlgo_Cut *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (BRepAlgo_Cut *)new BRepAlgo_Cut((TopoDS_Shape const &)*arg1,(TopoDS_Shape const &)*arg2);
  *(BRepAlgo_Cut **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepAlgo_1Cut(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepAlgo_Cut *arg1 = (BRepAlgo_Cut *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepAlgo_Cut **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopLoc_1Location_1isIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopLoc_Location *arg1 = (TopLoc_Location *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopLoc_Location **)&jarg1; 
  result = (arg1)->IsIdentity();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopLoc_1Location_1transformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopLoc_Location *arg1 = (TopLoc_Location *) 0 ;
  gp_Trsf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopLoc_Location **)&jarg1; 
  result = (gp_Trsf *) &(arg1)->Transformation();
  *(gp_Trsf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopLoc_1Location(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopLoc_Location *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopLoc_Location *)new TopLoc_Location();
  *(TopLoc_Location **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopLoc_1Location(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopLoc_Location *arg1 = (TopLoc_Location *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopLoc_Location **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopExp_1vertices_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  Standard_Boolean arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  arg2 = *(TopoDS_Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex & reference is null");
    return ;
  } 
  {
    arg4 = jarg4;
  }
  TopExp::Vertices((TopoDS_Edge const &)*arg1,*arg2,*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopExp_1vertices_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Vertex *arg2 = 0 ;
  TopoDS_Vertex *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  arg2 = *(TopoDS_Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Vertex & reference is null");
    return ;
  } 
  TopExp::Vertices((TopoDS_Edge const &)*arg1,*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopExp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopExp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopExp *)new TopExp();
  *(TopExp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopExp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopExp *arg1 = (TopExp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopExp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopExp_1Explorer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TopExp_Explorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TopExp_Explorer *)new TopExp_Explorer();
  *(TopExp_Explorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopExp_1Explorer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopAbs_ShapeEnum arg2 ;
  TopAbs_ShapeEnum arg3 ;
  TopExp_Explorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = (TopAbs_ShapeEnum)jarg2; 
  arg3 = (TopAbs_ShapeEnum)jarg3; 
  result = (TopExp_Explorer *)new TopExp_Explorer((TopoDS_Shape const &)*arg1,arg2,arg3);
  *(TopExp_Explorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1TopExp_1Explorer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  TopAbs_ShapeEnum arg2 ;
  TopExp_Explorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = (TopAbs_ShapeEnum)jarg2; 
  result = (TopExp_Explorer *)new TopExp_Explorer((TopoDS_Shape const &)*arg1,arg2);
  *(TopExp_Explorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopExp_1Explorer_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopAbs_ShapeEnum arg3 ;
  TopAbs_ShapeEnum arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopExp_Explorer **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg3 = (TopAbs_ShapeEnum)jarg3; 
  arg4 = (TopAbs_ShapeEnum)jarg4; 
  (arg1)->Init((TopoDS_Shape const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopExp_1Explorer_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  TopoDS_Shape *arg2 = 0 ;
  TopAbs_ShapeEnum arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopExp_Explorer **)&jarg1; 
  arg2 = *(TopoDS_Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg3 = (TopAbs_ShapeEnum)jarg3; 
  (arg1)->Init((TopoDS_Shape const &)*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopExp_1Explorer_1more(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopExp_Explorer **)&jarg1; 
  result = ((TopExp_Explorer const *)arg1)->More();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopExp_1Explorer_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopExp_Explorer **)&jarg1; 
  (arg1)->Next();
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopExp_1Explorer_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  TopoDS_Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopExp_Explorer **)&jarg1; 
  result = (TopoDS_Shape *) &(arg1)->Current();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Shape * tsp=new TopoDS_Shape();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1TopExp_1Explorer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TopExp_Explorer *arg1 = (TopExp_Explorer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TopExp_Explorer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1Bnd_1Box(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bnd_Box *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bnd_Box *)new Bnd_Box();
  *(Bnd_Box **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Bnd_1Box_1isVoid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Bnd_Box *arg1 = (Bnd_Box *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bnd_Box **)&jarg1; 
  result = ((Bnd_Box const *)arg1)->IsVoid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Bnd_1Box_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  Bnd_Box *arg1 = (Bnd_Box *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bnd_Box **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  Bnd_Box_get(arg1,arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Bnd_1Box(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bnd_Box *arg1 = (Bnd_Box *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bnd_Box **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBndLib_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Shape *arg1 = 0 ;
  Bnd_Box *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg2 = *(Bnd_Box **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bnd_Box & reference is null");
    return ;
  } 
  {
    try	{
      OCC_CATCH_SIGNALS
      BRepBndLib::Add((TopoDS_Shape const &)*arg1,*arg2);
    }
    catch(Standard_Failure) {
      cout << "add EXCEPTION IN OCE" << endl;
      /*return ;*/
    }
    catch (...) {
      cout << "... EXCEPTION IN OCE" << endl;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepBndLib(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepBndLib *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepBndLib *)new BRepBndLib();
  *(BRepBndLib **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepBndLib(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepBndLib *arg1 = (BRepBndLib *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepBndLib **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Adaptor2d_1Curve2d_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdoubleArray jresult = 0 ;
  Adaptor2d_Curve2d *arg1 = (Adaptor2d_Curve2d *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Adaptor2d_Curve2d **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  result = ((Adaptor2d_Curve2d const *)arg1)->Value(arg2);
  {
    jdouble nativeArray[]={
      (&result)->X(), (&result)->Y()
    };
    jdoubleArray toReturn=jenv->NewDoubleArray(2);
    jenv->SetDoubleArrayRegion(toReturn, 0, 2, nativeArray);
    jresult=toReturn;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Adaptor2d_1Curve2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Adaptor2d_Curve2d *arg1 = (Adaptor2d_Curve2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Adaptor2d_Curve2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1Geom2dAdaptor_1Curve_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Geom2dAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Geom2dAdaptor_Curve *)new Geom2dAdaptor_Curve();
  *(Geom2dAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1Geom2dAdaptor_1Curve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Geom2dAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom2d_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom2d_Curve const & reference is null");
    return 0;
  } 
  result = (Geom2dAdaptor_Curve *)new Geom2dAdaptor_Curve((Handle_Geom2d_Curve const &)*arg1);
  *(Geom2dAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1Geom2dAdaptor_1Curve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Handle_Geom2d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Geom2dAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom2d_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom2d_Curve const & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  result = (Geom2dAdaptor_Curve *)new Geom2dAdaptor_Curve((Handle_Geom2d_Curve const &)*arg1,arg2,arg3);
  *(Geom2dAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom2dAdaptor_1Curve_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Geom2dAdaptor_Curve *arg1 = (Geom2dAdaptor_Curve *) 0 ;
  Handle_Geom2d_Curve *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Geom2dAdaptor_Curve **)&jarg1; 
  arg2 = *(Handle_Geom2d_Curve **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom2d_Curve const & reference is null");
    return ;
  } 
  (arg1)->Load((Handle_Geom2d_Curve const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom2dAdaptor_1Curve_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  Geom2dAdaptor_Curve *arg1 = (Geom2dAdaptor_Curve *) 0 ;
  Handle_Geom2d_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Geom2dAdaptor_Curve **)&jarg1; 
  arg2 = *(Handle_Geom2d_Curve **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom2d_Curve const & reference is null");
    return ;
  } 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  (arg1)->Load((Handle_Geom2d_Curve const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Geom2dAdaptor_1Curve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Geom2dAdaptor_Curve *arg1 = (Geom2dAdaptor_Curve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Geom2dAdaptor_Curve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Adaptor3d_1Curve_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdoubleArray jresult = 0 ;
  Adaptor3d_Curve *arg1 = (Adaptor3d_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Adaptor3d_Curve **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  result = ((Adaptor3d_Curve const *)arg1)->Value(arg2);
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Adaptor3d_1Curve_1arrayValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  Adaptor3d_Curve *arg1 = (Adaptor3d_Curve *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Adaptor3d_Curve **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  Adaptor3d_Curve_arrayValues(arg1,arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1Adaptor3d_1Curve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Adaptor3d_Curve *arg1 = (Adaptor3d_Curve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Adaptor3d_Curve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAdaptor_1Curve_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GeomAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GeomAdaptor_Curve *)new GeomAdaptor_Curve();
  *(GeomAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAdaptor_1Curve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  GeomAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Curve const & reference is null");
    return 0;
  } 
  result = (GeomAdaptor_Curve *)new GeomAdaptor_Curve((Handle_Geom_Curve const &)*arg1);
  *(GeomAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAdaptor_1Curve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Handle_Geom_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  GeomAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Handle_Geom_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Curve const & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  result = (GeomAdaptor_Curve *)new GeomAdaptor_Curve((Handle_Geom_Curve const &)*arg1,arg2,arg3);
  *(GeomAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAdaptor_1Curve_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GeomAdaptor_Curve *arg1 = (GeomAdaptor_Curve *) 0 ;
  Handle_Geom_Curve *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GeomAdaptor_Curve **)&jarg1; 
  arg2 = *(Handle_Geom_Curve **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Curve const & reference is null");
    return ;
  } 
  (arg1)->Load((Handle_Geom_Curve const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAdaptor_1Curve_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  GeomAdaptor_Curve *arg1 = (GeomAdaptor_Curve *) 0 ;
  Handle_Geom_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GeomAdaptor_Curve **)&jarg1; 
  arg2 = *(Handle_Geom_Curve **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Curve const & reference is null");
    return ;
  } 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  (arg1)->Load((Handle_Geom_Curve const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GeomAdaptor_1Curve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GeomAdaptor_Curve *arg1 = (GeomAdaptor_Curve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GeomAdaptor_Curve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepAdaptor_1Curve_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepAdaptor_Curve *)new BRepAdaptor_Curve();
  *(BRepAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepAdaptor_1Curve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  BRepAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  result = (BRepAdaptor_Curve *)new BRepAdaptor_Curve((TopoDS_Edge const &)*arg1);
  *(BRepAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepAdaptor_1Curve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TopoDS_Edge *arg1 = 0 ;
  TopoDS_Face *arg2 = 0 ;
  BRepAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Edge **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return 0;
  } 
  arg2 = *(TopoDS_Face **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return 0;
  } 
  result = (BRepAdaptor_Curve *)new BRepAdaptor_Curve((TopoDS_Edge const &)*arg1,(TopoDS_Face const &)*arg2);
  *(BRepAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1initialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  (arg1)->Initialize((TopoDS_Edge const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1initialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  TopoDS_Edge *arg2 = 0 ;
  TopoDS_Face *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  arg2 = *(TopoDS_Edge **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Edge const & reference is null");
    return ;
  } 
  arg3 = *(TopoDS_Face **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Face const & reference is null");
    return ;
  } 
  (arg1)->Initialize((TopoDS_Edge const &)*arg2,(TopoDS_Face const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1trsf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  gp_Trsf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = (gp_Trsf *) &((BRepAdaptor_Curve const *)arg1)->Trsf();
  *(gp_Trsf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1is3DCurve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = ((BRepAdaptor_Curve const *)arg1)->Is3DCurve();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1isCurveOnSurface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = ((BRepAdaptor_Curve const *)arg1)->IsCurveOnSurface();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1curve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  GeomAdaptor_Curve *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = (GeomAdaptor_Curve *) &((BRepAdaptor_Curve const *)arg1)->Curve();
  *(GeomAdaptor_Curve **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1curveOnSurface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Adaptor3d_CurveOnSurface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = (Adaptor3d_CurveOnSurface *) &((BRepAdaptor_Curve const *)arg1)->CurveOnSurface();
  *(Adaptor3d_CurveOnSurface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1edge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  TopoDS_Edge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = (TopoDS_Edge *) &((BRepAdaptor_Curve const *)arg1)->Edge();
  *(TopoDS_Edge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = (Standard_Real)((BRepAdaptor_Curve const *)arg1)->Tolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1firstParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = (Standard_Real)((BRepAdaptor_Curve const *)arg1)->FirstParameter();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1lastParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = (Standard_Real)((BRepAdaptor_Curve const *)arg1)->LastParameter();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = ((BRepAdaptor_Curve const *)arg1)->IsClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1isPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = ((BRepAdaptor_Curve const *)arg1)->IsPeriodic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1period(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = (Standard_Real)((BRepAdaptor_Curve const *)arg1)->Period();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdoubleArray jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  Standard_Real arg2 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  result = ((BRepAdaptor_Curve const *)arg1)->Value(arg2);
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  GeomAbs_CurveType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  result = ((BRepAdaptor_Curve const *)arg1)->GetType();
  *(GeomAbs_CurveType **)&jresult = new GeomAbs_CurveType((const GeomAbs_CurveType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepAdaptor_1Curve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepAdaptor_Curve *arg1 = (BRepAdaptor_Curve *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepAdaptor_Curve **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GProp_1GProps(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GProp_GProps *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GProp_GProps *)new GProp_GProps();
  *(GProp_GProps **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GProp_1GProps_1mass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GProp_GProps *arg1 = (GProp_GProps *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GProp_GProps **)&jarg1; 
  result = (Standard_Real)((GProp_GProps const *)arg1)->Mass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GProp_1GProps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GProp_GProps *arg1 = (GProp_GProps *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GProp_GProps **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepGProp_1linearProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg2 = *(GProp_GProps **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GProp_GProps & reference is null");
    return ;
  } 
  BRepGProp::LinearProperties((TopoDS_Shape const &)*arg1,*arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepGProp_1volumeProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  Standard_Boolean arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg2 = *(GProp_GProps **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GProp_GProps & reference is null");
    return ;
  } 
  {
    arg3 = jarg3;
  }
  BRepGProp::VolumeProperties((TopoDS_Shape const &)*arg1,*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepGProp_1volumeProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg2 = *(GProp_GProps **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GProp_GProps & reference is null");
    return ;
  } 
  BRepGProp::VolumeProperties((TopoDS_Shape const &)*arg1,*arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepGProp_1volumeProperties_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  jdouble jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Boolean arg4 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(GProp_GProps **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GProp_GProps & reference is null");
    return 0;
  } 
  arg3 = (Standard_Real)jarg3; 
  {
    arg4 = jarg4;
  }
  result = (Standard_Real)BRepGProp::VolumeProperties((TopoDS_Shape const &)*arg1,*arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepGProp_1volumeProperties_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jdouble jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(GProp_GProps **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GProp_GProps & reference is null");
    return 0;
  } 
  arg3 = (Standard_Real)jarg3; 
  result = (Standard_Real)BRepGProp::VolumeProperties((TopoDS_Shape const &)*arg1,*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepGProp_1surfaceProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return ;
  } 
  arg2 = *(GProp_GProps **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GProp_GProps & reference is null");
    return ;
  } 
  BRepGProp::SurfaceProperties((TopoDS_Shape const &)*arg1,*arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepGProp_1surfaceProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jdouble jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  GProp_GProps *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = *(GProp_GProps **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GProp_GProps & reference is null");
    return 0;
  } 
  arg3 = (Standard_Real)jarg3; 
  result = (Standard_Real)BRepGProp::SurfaceProperties((TopoDS_Shape const &)*arg1,*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepGProp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepGProp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepGProp *)new BRepGProp();
  *(BRepGProp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepGProp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepGProp *arg1 = (BRepGProp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepGProp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1ShapeAnalysis_1FreeBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  Standard_Boolean arg3 ;
  ShapeAnalysis_FreeBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    arg2 = jarg2;
  }
  {
    arg3 = jarg3;
  }
  result = (ShapeAnalysis_FreeBounds *)new ShapeAnalysis_FreeBounds((TopoDS_Shape const &)*arg1,arg2,arg3);
  *(ShapeAnalysis_FreeBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1ShapeAnalysis_1FreeBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Boolean arg2 ;
  ShapeAnalysis_FreeBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  {
    arg2 = jarg2;
  }
  result = (ShapeAnalysis_FreeBounds *)new ShapeAnalysis_FreeBounds((TopoDS_Shape const &)*arg1,arg2);
  *(ShapeAnalysis_FreeBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1ShapeAnalysis_1FreeBounds_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  ShapeAnalysis_FreeBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  result = (ShapeAnalysis_FreeBounds *)new ShapeAnalysis_FreeBounds((TopoDS_Shape const &)*arg1);
  *(ShapeAnalysis_FreeBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeAnalysis_1FreeBounds_1getClosedWires(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShapeAnalysis_FreeBounds *arg1 = (ShapeAnalysis_FreeBounds *) 0 ;
  TopoDS_Compound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeAnalysis_FreeBounds **)&jarg1; 
  result = (TopoDS_Compound *) &((ShapeAnalysis_FreeBounds const *)arg1)->GetClosedWires();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Compound * tsp=new TopoDS_Compound();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeAnalysis_1FreeBounds_1getOpenWires(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShapeAnalysis_FreeBounds *arg1 = (ShapeAnalysis_FreeBounds *) 0 ;
  TopoDS_Compound *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShapeAnalysis_FreeBounds **)&jarg1; 
  result = (TopoDS_Compound *) &((ShapeAnalysis_FreeBounds const *)arg1)->GetOpenWires();
  {
    if(result->IsNull())
    {
      jresult=0L; //NULL
    }
    else
    {
      TopoDS_Compound * tsp=new TopoDS_Compound();
      tsp->TShape(result->TShape());
      tsp->Location(result->Location());
      tsp->Orientation(result->Orientation());
      jresult=(jlong)tsp;
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1ShapeAnalysis_1FreeBounds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShapeAnalysis_FreeBounds *arg1 = (ShapeAnalysis_FreeBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShapeAnalysis_FreeBounds **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GCPnts_1UniformDeflection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GCPnts_UniformDeflection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GCPnts_UniformDeflection *)new GCPnts_UniformDeflection();
  *(GCPnts_UniformDeflection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1UniformDeflection_1initialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5, jboolean jarg6) {
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  Adaptor3d_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  Standard_Boolean arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GCPnts_UniformDeflection **)&jarg1; 
  arg2 = *(Adaptor3d_Curve **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Adaptor3d_Curve & reference is null");
    return ;
  } 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  arg5 = (Standard_Real)jarg5; 
  {
    arg6 = jarg6;
  }
  (arg1)->Initialize(*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1UniformDeflection_1initialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  Adaptor3d_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GCPnts_UniformDeflection **)&jarg1; 
  arg2 = *(Adaptor3d_Curve **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Adaptor3d_Curve & reference is null");
    return ;
  } 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  arg5 = (Standard_Real)jarg5; 
  (arg1)->Initialize(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1UniformDeflection_1nbPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GCPnts_UniformDeflection **)&jarg1; 
  result = (Standard_Integer)((GCPnts_UniformDeflection const *)arg1)->NbPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1UniformDeflection_1parameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  Standard_Integer arg2 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GCPnts_UniformDeflection **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  result = (Standard_Real)((GCPnts_UniformDeflection const *)arg1)->Parameter(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GCPnts_1UniformDeflection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GCPnts_UniformDeflection *arg1 = (GCPnts_UniformDeflection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GCPnts_UniformDeflection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1AbscissaPoint_1length_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Adaptor3d_Curve *arg1 = 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Adaptor3d_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Adaptor3d_Curve & reference is null");
    return 0;
  } 
  result = (Standard_Real)GCPnts_AbscissaPoint::Length(*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1AbscissaPoint_1length_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  Adaptor3d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Adaptor3d_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Adaptor3d_Curve & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  result = (Standard_Real)GCPnts_AbscissaPoint::Length(*arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1AbscissaPoint_1length_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  Adaptor3d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Adaptor3d_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Adaptor3d_Curve & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  result = (Standard_Real)GCPnts_AbscissaPoint::Length(*arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1AbscissaPoint_1length_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  Adaptor3d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Adaptor3d_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Adaptor3d_Curve & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  result = (Standard_Real)GCPnts_AbscissaPoint::Length(*arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GCPnts_1AbscissaPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GCPnts_AbscissaPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GCPnts_AbscissaPoint *)new GCPnts_AbscissaPoint();
  *(GCPnts_AbscissaPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GCPnts_1AbscissaPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Adaptor3d_Curve *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Real arg3 ;
  GCPnts_AbscissaPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Adaptor3d_Curve **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Adaptor3d_Curve & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  arg3 = (Standard_Real)jarg3; 
  result = (GCPnts_AbscissaPoint *)new GCPnts_AbscissaPoint(*arg1,arg2,arg3);
  *(GCPnts_AbscissaPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GCPnts_1AbscissaPoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  Standard_Real arg1 ;
  Adaptor3d_Curve *arg2 = 0 ;
  Standard_Real arg3 ;
  Standard_Real arg4 ;
  GCPnts_AbscissaPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (Standard_Real)jarg1; 
  arg2 = *(Adaptor3d_Curve **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Adaptor3d_Curve & reference is null");
    return 0;
  } 
  arg3 = (Standard_Real)jarg3; 
  arg4 = (Standard_Real)jarg4; 
  result = (GCPnts_AbscissaPoint *)new GCPnts_AbscissaPoint(arg1,*arg2,arg3,arg4);
  *(GCPnts_AbscissaPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1AbscissaPoint_1isDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GCPnts_AbscissaPoint *arg1 = (GCPnts_AbscissaPoint *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GCPnts_AbscissaPoint **)&jarg1; 
  result = ((GCPnts_AbscissaPoint const *)arg1)->IsDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GCPnts_1AbscissaPoint_1parameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GCPnts_AbscissaPoint *arg1 = (GCPnts_AbscissaPoint *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GCPnts_AbscissaPoint **)&jarg1; 
  result = (Standard_Real)((GCPnts_AbscissaPoint const *)arg1)->Parameter();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GCPnts_1AbscissaPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GCPnts_AbscissaPoint *arg1 = (GCPnts_AbscissaPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GCPnts_AbscissaPoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepMesh_1DiscretRoot_1setDeflection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BRepMesh_DiscretRoot *arg1 = (BRepMesh_DiscretRoot *) 0 ;
  Standard_Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepMesh_DiscretRoot **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  (arg1)->SetDeflection(arg2);
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepMesh_1DiscretRoot_1setAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  BRepMesh_DiscretRoot *arg1 = (BRepMesh_DiscretRoot *) 0 ;
  Standard_Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepMesh_DiscretRoot **)&jarg1; 
  arg2 = (Standard_Real)jarg2; 
  (arg1)->SetAngle(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepMesh_1DiscretRoot_1deflection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BRepMesh_DiscretRoot *arg1 = (BRepMesh_DiscretRoot *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepMesh_DiscretRoot **)&jarg1; 
  result = (Standard_Real)((BRepMesh_DiscretRoot const *)arg1)->Deflection();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepMesh_1DiscretRoot_1angle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  BRepMesh_DiscretRoot *arg1 = (BRepMesh_DiscretRoot *) 0 ;
  Standard_Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepMesh_DiscretRoot **)&jarg1; 
  result = (Standard_Real)((BRepMesh_DiscretRoot const *)arg1)->Angle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepMesh_1DiscretRoot_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepMesh_DiscretRoot *arg1 = (BRepMesh_DiscretRoot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepMesh_DiscretRoot **)&jarg1; 
  (arg1)->Perform();
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepMesh_1DiscretRoot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepMesh_DiscretRoot *arg1 = (BRepMesh_DiscretRoot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepMesh_DiscretRoot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepMesh_1IncrementalMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BRepMesh_IncrementalMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BRepMesh_IncrementalMesh *)new BRepMesh_IncrementalMesh();
  *(BRepMesh_IncrementalMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepMesh_1IncrementalMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  Standard_Real arg4 ;
  BRepMesh_IncrementalMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  {
    arg3 = jarg3;
  }
  arg4 = (Standard_Real)jarg4; 
  result = (BRepMesh_IncrementalMesh *)new BRepMesh_IncrementalMesh((TopoDS_Shape const &)*arg1,arg2,arg3,arg4);
  *(BRepMesh_IncrementalMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepMesh_1IncrementalMesh_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Real arg2 ;
  Standard_Boolean arg3 ;
  BRepMesh_IncrementalMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  {
    arg3 = jarg3;
  }
  result = (BRepMesh_IncrementalMesh *)new BRepMesh_IncrementalMesh((TopoDS_Shape const &)*arg1,arg2,arg3);
  *(BRepMesh_IncrementalMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1BRepMesh_1IncrementalMesh_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  TopoDS_Shape *arg1 = 0 ;
  Standard_Real arg2 ;
  BRepMesh_IncrementalMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TopoDS_Shape **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TopoDS_Shape const & reference is null");
    return 0;
  } 
  arg2 = (Standard_Real)jarg2; 
  result = (BRepMesh_IncrementalMesh *)new BRepMesh_IncrementalMesh((TopoDS_Shape const &)*arg1,arg2);
  *(BRepMesh_IncrementalMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepMesh_1IncrementalMesh_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BRepMesh_IncrementalMesh *arg1 = (BRepMesh_IncrementalMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepMesh_IncrementalMesh **)&jarg1; 
  (arg1)->Perform();
}


SWIGEXPORT jboolean JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepMesh_1IncrementalMesh_1isModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BRepMesh_IncrementalMesh *arg1 = (BRepMesh_IncrementalMesh *) 0 ;
  Standard_Boolean result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BRepMesh_IncrementalMesh **)&jarg1; 
  result = ((BRepMesh_IncrementalMesh const *)arg1)->IsModified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1BRepMesh_1IncrementalMesh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BRepMesh_IncrementalMesh *arg1 = (BRepMesh_IncrementalMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BRepMesh_IncrementalMesh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_new_1GeomAPI_1ProjectPointOnSurf(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  gp_Pnt *arg1 = 0 ;
  Handle_Geom_Surface *arg2 = 0 ;
  GeomAPI_ProjectPointOnSurf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  {
    if(jenv->GetArrayLength(jarg1)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg1, NULL);
    arg1=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  arg2 = *(Handle_Geom_Surface **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Surface const & reference is null");
    return 0;
  } 
  result = (GeomAPI_ProjectPointOnSurf *)new GeomAPI_ProjectPointOnSurf((gp_Pnt const &)*arg1,(Handle_Geom_Surface const &)*arg2);
  *(GeomAPI_ProjectPointOnSurf **)&jresult = result; 
  {
    delete arg1;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1ProjectPointOnSurf_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jlong jarg3, jobject jarg3_) {
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  gp_Pnt *arg2 = 0 ;
  Handle_Geom_Surface *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GeomAPI_ProjectPointOnSurf **)&jarg1; 
  {
    if(jenv->GetArrayLength(jarg2)!=3)
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "array length must be 3");
    jdouble * naxe=jenv->GetDoubleArrayElements(jarg2, NULL);
    arg2=new gp_Pnt(naxe[0],naxe[1],naxe[2]);
  }
  arg3 = *(Handle_Geom_Surface **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Handle_Geom_Surface const & reference is null");
    return ;
  } 
  (arg1)->Init((gp_Pnt const &)*arg2,(Handle_Geom_Surface const &)*arg3);
  {
    delete arg2;
  }
}


SWIGEXPORT jint JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1ProjectPointOnSurf_1nbPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Standard_Integer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_ProjectPointOnSurf **)&jarg1; 
  result = (Standard_Integer)((GeomAPI_ProjectPointOnSurf const *)arg1)->NbPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1ProjectPointOnSurf_1lowerDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Quantity_Length result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_ProjectPointOnSurf **)&jarg1; 
  result = (Quantity_Length)((GeomAPI_ProjectPointOnSurf const *)arg1)->LowerDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1ProjectPointOnSurf_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdoubleArray jresult = 0 ;
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Standard_Integer arg2 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_ProjectPointOnSurf **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  result = ((GeomAPI_ProjectPointOnSurf const *)arg1)->Point(arg2);
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1ProjectPointOnSurf_1lowerDistanceParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Quantity_Parameter *arg2 = 0 ;
  Quantity_Parameter *arg3 = 0 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_ProjectPointOnSurf **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  ((GeomAPI_ProjectPointOnSurf const *)arg1)->LowerDistanceParameters(*arg2,*arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1ProjectPointOnSurf_1parameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  Standard_Integer arg2 ;
  Quantity_Parameter *arg3 = 0 ;
  Quantity_Parameter *arg4 = 0 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_ProjectPointOnSurf **)&jarg1; 
  arg2 = (Standard_Integer)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, (double **)&arg4, jarg4)) return ; 
  ((GeomAPI_ProjectPointOnSurf const *)arg1)->Parameters(arg2,*arg3,*arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, (double *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT jdoubleArray JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAPI_1ProjectPointOnSurf_1nearestPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  gp_Pnt result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeomAPI_ProjectPointOnSurf **)&jarg1; 
  result = ((GeomAPI_ProjectPointOnSurf const *)arg1)->NearestPoint();
  {
    jresult=XYZtoDoubleArray(jenv, (&result)->XYZ());
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_delete_1GeomAPI_1ProjectPointOnSurf(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GeomAPI_ProjectPointOnSurf *arg1 = (GeomAPI_ProjectPointOnSurf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GeomAPI_ProjectPointOnSurf **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Compound_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Compound **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1CompSolid_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_CompSolid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Solid_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Solid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Shell_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Shell **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Face_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Face **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Wire_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Wire **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Edge_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Edge **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_TopoDS_1Vertex_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Shape **)&baseptr = *(TopoDS_Vertex **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRep_1Builder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TopoDS_Builder **)&baseptr = *(BRep_Builder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_Command **)&baseptr = *(BRepBuilderAPI_MakeShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1ModifyShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepBuilderAPI_ModifyShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1Transform_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_ModifyShape **)&baseptr = *(BRepBuilderAPI_Transform **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeVertex_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepBuilderAPI_MakeVertex **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeWire_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepBuilderAPI_MakeWire **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeEdge_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepBuilderAPI_MakeEdge **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeFace_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepBuilderAPI_MakeFace **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1MakeSolid_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepBuilderAPI_MakeSolid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepBuilderAPI_1NurbsConvert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_ModifyShape **)&baseptr = *(BRepBuilderAPI_NurbsConvert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepPrimAPI_1MakeBox_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepPrimAPI_MakeBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepPrimAPI_1MakeCone_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepPrimAPI_MakeCone **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepPrimAPI_1MakeCylinder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepPrimAPI_MakeCylinder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepPrimAPI_1MakeTorus_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepPrimAPI_MakeTorus **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepPrimAPI_1MakeSphere_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepPrimAPI_MakeSphere **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepPrimAPI_1MakeSweep_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepPrimAPI_MakeSweep **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepPrimAPI_1MakePrism_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepPrimAPI_MakeSweep **)&baseptr = *(BRepPrimAPI_MakePrism **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepPrimAPI_1MakeRevol_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepPrimAPI_MakeSweep **)&baseptr = *(BRepPrimAPI_MakeRevol **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1BooleanOperation_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepAlgoAPI_BooleanOperation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1Fuse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepAlgoAPI_BooleanOperation **)&baseptr = *(BRepAlgoAPI_Fuse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1Common_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepAlgoAPI_BooleanOperation **)&baseptr = *(BRepAlgoAPI_Common **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1Cut_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepAlgoAPI_BooleanOperation **)&baseptr = *(BRepAlgoAPI_Cut **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgoAPI_1Section_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepAlgoAPI_BooleanOperation **)&baseptr = *(BRepAlgoAPI_Section **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1NormalProjection_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepOffsetAPI_NormalProjection **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipe_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepPrimAPI_MakeSweep **)&baseptr = *(BRepOffsetAPI_MakePipe **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1MakePipeShell_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepPrimAPI_MakeSweep **)&baseptr = *(BRepOffsetAPI_MakePipeShell **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepOffsetAPI_1ThruSections_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepOffsetAPI_ThruSections **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Curve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Handle_Geom_Geometry **)&baseptr = *(Handle_Geom_Curve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1Surface_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Handle_Geom_Geometry **)&baseptr = *(Handle_Geom_Surface **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom2d_1Curve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Handle_Geom2d_Geometry **)&baseptr = *(Handle_Geom2d_Curve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BoundedCurve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Handle_Geom_Curve **)&baseptr = *(Handle_Geom_BoundedCurve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1BSplineCurve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Handle_Geom_BoundedCurve **)&baseptr = *(Handle_Geom_BSplineCurve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom_1TrimmedCurve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Handle_Geom_BoundedCurve **)&baseptr = *(Handle_Geom_TrimmedCurve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFilletAPI_1LocalOperation_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepFilletAPI_LocalOperation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFilletAPI_1MakeFillet_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepFilletAPI_LocalOperation **)&baseptr = *(BRepFilletAPI_MakeFillet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepFilletAPI_1MakeChamfer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepFilletAPI_LocalOperation **)&baseptr = *(BRepFilletAPI_MakeChamfer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_STEPControl_1Reader_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XSControl_Reader **)&baseptr = *(STEPControl_Reader **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_IGESControl_1Reader_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XSControl_Reader **)&baseptr = *(IGESControl_Reader **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeFix_1Wireframe_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ShapeFix_Root **)&baseptr = *(ShapeFix_Wireframe **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1RemoveInternalWires_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ShapeUpgrade_Tool **)&baseptr = *(ShapeUpgrade_RemoveInternalWires **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_ShapeUpgrade_1ShapeDivideArea_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ShapeUpgrade_ShapeDivide **)&baseptr = *(ShapeUpgrade_ShapeDivideArea **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1BooleanOperation_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepBuilderAPI_MakeShape **)&baseptr = *(BRepAlgo_BooleanOperation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAlgo_1Cut_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepAlgo_BooleanOperation **)&baseptr = *(BRepAlgo_Cut **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_Geom2dAdaptor_1Curve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Adaptor2d_Curve2d **)&baseptr = *(Geom2dAdaptor_Curve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_GeomAdaptor_1Curve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Adaptor3d_Curve **)&baseptr = *(GeomAdaptor_Curve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepAdaptor_1Curve_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Adaptor3d_Curve **)&baseptr = *(BRepAdaptor_Curve **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_jcae_opencascade_jni_OccJavaJNI_BRepMesh_1IncrementalMesh_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BRepMesh_DiscretRoot **)&baseptr = *(BRepMesh_IncrementalMesh **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

